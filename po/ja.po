# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-08-27 20:01+0900\n"
"PO-Revision-Date: 2014-08-27 21:47+0900\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: compiler-errors.md:2
msgid "##Template-related errors"
msgstr ""

#. type: Plain text
#: compiler-errors.md:4
#, no-wrap
msgid "**Not loading template implementations**\n"
msgstr ""

#. type: Plain text
#: compiler-errors.md:6
msgid "Errors look like:"
msgstr ""

#. type: Plain text
#: compiler-errors.md:12
msgid ""
"``` // gcc 'XXX' undeclared (first use in this function)  expected "
"expression before ‘YYY’ ```"
msgstr ""

#. type: Plain text
#: compiler-errors.md:14
msgid ""
"There are a lot of standard template implementations commonly used in ATS2, "
"and they are not loaded by default (for instance, in kernel or embedded "
"programming, it is best not to load what one doesn't need). This can usually "
"be fixed by adding this at the start of your file:"
msgstr ""

#. type: Plain text
#: compiler-errors.md:19
msgid ""
"```ocaml #include \"share/atspre_staload.hats\" ``` By default, the ATS "
"compiler only [[staloads|staload]] everything in [[prelude|ATSLIB]] except "
"its template implementations, which is a very common point of confusion for "
"ATS newcomers."
msgstr ""

#. type: Plain text
#: compiler-errors.md:21
#, no-wrap
msgid "**Template functions on non-abstract types**\n"
msgstr ""

#. type: Plain text
#: compiler-errors.md:23
msgid ""
"Using a function template on a non-abstract type can result in this (the "
"rules for templates are not all written down and the implementation is not "
"finished):"
msgstr ""

#. type: Plain text
#: compiler-errors.md:31
#, no-wrap
msgid ""
"    falcon_cnfize_dats.c: In function âATSLIB_056_prelude__list_vt_freelin__clear__7__1â:\n"
"    falcon_cnfize_dats.c:1698:1: error: âPMVtmpltcstmatâ undeclared (first use in this function)\n"
"    falcon_cnfize_dats.c:1698:1: note: each undeclared identifier is reported only once for each function     it appears in\n"
"    falcon_cnfize_dats.c:1698:1: error: âgclear_refâ undeclared (first use in this function)\n"
"    falcon_cnfize_dats.c:1698:1: warning: implicit declaration of function âS2EVarâ [-Wimplicit-function-declaration]\n"
"    falcon_cnfize_dats.c:1698:1: error: expected expression before â)â token\n"
"    exec(gcc -std=c99 -D_XOPEN_SOURCE -I/home/brandon/ATS-Postiats -I/home/brandon/ATS-Postiats/ccomp/runtime -I/home/brandon/ATS-Postiats/contrib -DATS_MEMALLOC_LIBC -D_GNU_SOURCE -c falcon_cnfize_dats.c) = 256\n"
msgstr ""

#. type: Plain text
#: compiler-errors.md:33
msgid ""
"To avoid this, either don't use a template (for now), or try to use an "
"abstract type:"
msgstr ""

#. type: Plain text
#: compiler-errors.md:35
#, no-wrap
msgid "    abstype mytype = ptr\n"
msgstr ""

#. type: Plain text
#: compiler-errors.md:37
msgid ""
"Then you introduce cast functions where needed to convert between the "
"abstract type and other (view)types."
msgstr ""

#. type: Plain text
#: compiler-errors.md:39
msgid "## Missing Linker Flag Errors"
msgstr ""

#. type: Plain text
#: compiler-errors.md:41
#, no-wrap
msgid "**Didn't specify which memory allocation functions to use**\n"
msgstr ""

#. type: Plain text
#: compiler-errors.md:44
msgid ""
"Usually you'll want to properly pass -DATS_MEMALLOC_LIBC to patscc. The main "
"thing you'll see here is `undefined reference to `atsruntime_malloc_undef'` "
"(usually several times)."
msgstr ""

#. type: Plain text
#: compiler-errors.md:51
#, no-wrap
msgid ""
"    /tmp/cchxHdy9.o: In function atspre_arrayptr_free':\n"
"    gurobi_mip1_dats.c:(.text+0x1d4): undefined reference toatsruntime_mfree_undef'\n"
"    /tmp/cchxHdy9.o: In function  _057_media_057_RAID5_057_home_057_brandon_057_ATS_055_Postiats_057_contrib_057_libats_055_bbarker_057_ats    optml_057_TEST_057_gurobi_mip1_056_dats__mytest_main':\n"
"    gurobi_mip1_dats.c:(.text+0x4dc): undefined reference toatsruntime_malloc_undef'\n"
"    gurobi_mip1_dats.c:(.text+0x54e): undefined reference to `atsruntime_malloc_undef'\n"
"    collect2: ld returned 1 exit status\n"
msgstr ""

#. type: Plain text
#: compiler-errors.md:52
msgid ""
"Alternatively, for more customization, see [[Stack and heap allocation|Stack "
"and heap allocation]]."
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:2
msgid ""
"ATS has many facilities that enable effective, efficient, and [[safe|"
"safety]] scientific computing. The language's focus on safety and efficiency "
"is obvious, but actually making efficient scientific code is often far from "
"easy (in any language)."
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:6
msgid ""
"## Parallel programming * [OpenMP](https://github.com/githwxi/ATS-Postiats-"
"contrib/tree/master/contrib/OpenMP) For shared memory systems; stands for "
"[Open Multi-Processing](https://en.wikipedia.org/wiki/Openmp).  * [MPI]"
"(https://github.com/githwxi/ATS-Postiats-contrib/tree/master/contrib/MPI) "
"For shared and/or distributed memory systems; stands for [Message Passing "
"Interface](https://en.wikipedia.org/wiki/Message_Passing_Interface)."
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:9
msgid ""
"## Optimization * Linear and convex optimization: [Gurobi interface](https://"
"github.com/githwxi/ATS-Postiats-contrib/tree/master/contrib/gurobi)"
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:12
msgid ""
"## Python [[code generation|code generation]] Python is perhaps one of the "
"most popular general scientific computing languages, alongside MATLAB, "
"though the R language has a notable lead with available statistics software "
"(particularly related to Biology)."
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:15
msgid ""
"## Matrix operations Efficient matrix operations are difficult in practice."
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:17
msgid "### Native ATS2 matrix algebra implementations"
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:20
msgid "### BLAS interfaces (none yet?)"
msgstr ""

#. type: Plain text
#: Scientific-Computing.md:21
msgid "### Benchmarks"
msgstr ""

#. type: Plain text
#: Built-in-operators.md:2
msgid "This page lists built-in operators for ATS."
msgstr "このページでは ATS のビルトイン演算子を紹介します。"

#. type: Bullet: '  - '
#: Built-in-operators.md:10
msgid ""
"`!=` - \"Not equal to\" (float/double/int). Also the same as <>, but "
"preferred since it is easier to read for most and does not share the same "
"string as the function effect <>."
msgstr ""
"`!=` - \"等しくない\" (float/double/int)。<> でも同じ意味になります。しかしほ"
"とんどの人に読みやすく、関数の作用 <> と同じ文字列であるため、こちらの演算子"
"を推奨します。"

#. type: Bullet: '  - '
#: Built-in-operators.md:10
msgid ""
"`<>` - \"Not equal to\" (float/double/int). Also the same as !=, but not "
"recommended in general since it is less common than != in most programming "
"languages and does not share the same string as the function effect <>."
msgstr ""
"`<>` - \"等しくない\" (float/double/int)。!= でも同じ意味になります。しかしほ"
"とんどのプログラミング言語では != よりも一般的ではなく、関数の作用 <> と同じ"
"文字列であるため、この演算子は推奨されません。"

#. type: Bullet: '  - '
#: Built-in-operators.md:10
msgid ""
"`=>` - Similar to `=`, but used to define the body of a lambda function or a "
"case expression."
msgstr ""
"`=>` - `=` と似ていますが、ラムダ関数や case 式の本体を定義するのに使います。"

#. type: Bullet: '  - '
#: Built-in-operators.md:10
msgid ""
"`=>>` - Similar to `=>`, but indicates to the typechecker that this clause "
"needs to be typechecked under the sequentiality assumption that the given "
"value that matches it does not match the pattern guards associated with any "
"previous clauses. For more information, see [Sequentiality of Pattern "
"Matching][1] or the [forums][2]."
msgstr ""
"`=>>` - `=>` と似ていますが、この節が連続していると仮定して型検査される必要が"
"あることを型検査器に指示します。すなわち、その節にマッチする値がそれ以前の節"
"のパターンガードの全てにマッチしなかったと仮定します。詳細は [パターンマッチ"
"の連続性][1] や [フォーラム][2] を参照してください。"

#. type: Bullet: '  - '
#: Built-in-operators.md:10
msgid ""
"`=/=>` - Similar to `=>>` but indicates to the typechecker that the proof "
"following `=/=>` must prove falsehood. During compilation (after "
"typechecking), the third clause is removed as it can never be chosen at run-"
"time [because matching v against yields falsehood][3]."
msgstr "`=/=>` - `=>>` と似ていますが、`=/=>` 後の証明がウソであることを型検査器に指示します。(型検査後の) コンパイル中において、実行時に選択される可能性がないので、この節は削除されます。[なぜなら、そのマッチがウソを生成するためです][3]。"

#. type: Bullet: '  - '
#: Built-in-operators.md:10
msgid "`=/=>>` - combines the features of `=/=>` and `=>>`."
msgstr "`=/=>>` - `=/=>` と `=>>` の機能を結合したものです。"

#. type: Bullet: '  - '
#: Built-in-operators.md:10
msgid ""
"`#[ ... ]` - Allows static variables present in a function return type to be "
"used in the statics of the function's arguments. For example, if we want `b` "
"from the return type to be in the scope of the statics in the arguments, "
"(that is, `b` in `opt (a,b)`):"
msgstr "`#[ ... ]` - 関数の引数の静的な部分で使われいた型を、その関数の返り値の静的な変数が含むことを許します。例えば、引数の静的なスコープ中にある返り値の型で `b` を作りたい場合は (つまり `opt (a,b)` 中の `b` です):"

#. type: Plain text
#: Built-in-operators.md:18
#, no-wrap
msgid ""
"```ocaml\n"
"fun{a:t@ype}\n"
"linset_choose (xs: !set a, x0: &a? >> opt (a, b)) : #[b:bool] bool (b)\n"
"```\n"
"  - `#[ ...  | ... ]` - Provides static values (witnesses) to the type checker when they are missing or cannot be inferred. See [typechecking errors ](https://github.com/githwxi/ATS-Postiats/wiki/typechecking-errors#supplying-static-values-to-the-typechecker) for examples.\n"
"  - `!` - Dereferences pointer. Given a pointer `p` of the type `ptr(L)` for some `L`, `!p` yields the value stored at the memory location `L`. The typechecker first searches for a proof of the view `T@L` for some `T` among all the currently available proofs when typechecking `!p`; if such a proof `pf` is found, then `!p` dereferences the pointer.\n"
"  - `:=` - Assign new value to dynamic or static value.\n"
msgstr ""
"```ocaml\n"
"fun{a:t@ype}\n"
"linset_choose (xs: !set a, x0: &a? >> opt (a, b)) : #[b:bool] bool (b)\n"
"```\n"
"  - `#[ ...  | ... ]` - 静的な変数 (証明) が見つからなかったり推論できなかった場合に、その静的な変数を型検査器に与えます。[型検査エラー](https://github.com/githwxi/ATS-Postiats/wiki/typechecking-errors#supplying-static-values-to-the-typechecker) にいくつか例があります。\n"
"  - `!` - ポインタをデリファレンスします。どこか `L` について型 `ptr(L)` のポインタ `p` が与えられた時、`!p` はメモリ位置 `L` に保存された値を生じます。`!p` を型検査すると、型検査器はまずはじめに現在有効な全ての証明の中で `T について観 `T@L` の証明を検索します: もしそのような証明 `pf` が見つかったら、!p はそのポインタをデリファレンスします。\n"
"  - `:=` - 静的もしくは動的な値に新しい値を代入します。\n"

#. type: Plain text
#: Built-in-operators.md:21
msgid ""
"[1]: http://www.ats-lang.org/DOCUMENT/INTPROGINATS/HTML/x2683.html [2]: "
"https://groups.google.com/d/msg/ats-lang-users/g3A2fzeKM3A/2UYOjNLVZ5sJ [3]: "
"https://groups.google.com/d/msg/ats-lang-users/NpQZuB7W9PU/5pwjoDi4oj0J"
msgstr ""
"[1]: http://www.ats-lang.org/DOCUMENT/INTPROGINATS/HTML/x2683.html\n"
"[2]: https://groups.google.com/d/msg/ats-lang-users/g3A2fzeKM3A/2UYOjNLVZ5sJ\n"
"[3]: https://groups.google.com/d/msg/ats-lang-users/NpQZuB7W9PU/5pwjoDi4oj0J"

#. type: Plain text
#: Building-and-installing.md:2
msgid "## Compiling ATS2 from packaged C-source."
msgstr "## C言語ソースパッケージから ATS2 をコンパイルする"

#. type: Plain text
#: Building-and-installing.md:4
msgid "Please see the [directions][1] on the ATS site."
msgstr "ATS の Web サイトでの [説明][1] を参考にしてください。"

#. type: Plain text
#: Building-and-installing.md:6
msgid "## Compiling ATS2 from github-hosted source."
msgstr ""
"## github にホスティングされているソースコードから ATS2 をコンパイルする"

#. type: Plain text
#: Building-and-installing.md:9
msgid ""
"Please note that compiling ATS2 in this style is recommended primarily for "
"people who are interested in helping develop ATS2."
msgstr ""
"このスタイルでの ATS2 コンパイルは、ATS2 の開発に参加することに興味のある人向"
"けであることに注意してください。"

#. type: Plain text
#: Building-and-installing.md:13
msgid ""
"ATS2 is implemented in ATS1.  Currently, the required version of ATS1 (ATS/"
"Anairiats) for bootstrapping ATS2 (ATS/Postiats) is 0.2.11.  Assume that you "
"have already installed ATS1-0.2.11."
msgstr ""
"ATS2 は ATS1 で実装されています。\n"
"現時点では、ATS2 (ATS/Postiats) をブートストラップするのに必要な ATS1 (ATS/"
"Anairiats) のバージョンは 0.2.11 です。\n"
"以下の説明は、すでに ATS1-0.2.11 がインストールされていると仮定しています。"

#. type: Plain text
#: Building-and-installing.md:15
msgid ""
"Checkout Postiats from [sources][2] by downloading the zip file or using the "
"following command (assuming that `~/postiats` is a directory where the "
"repository is to be put locally):"
msgstr ""
"Postiats の [ソースコード][2] を zip ファイルとしてダウンロードするか、\n"
"次のコマンドを使ってチェックアウトしてください。\n"
"(`~/postiats` をローカルにチェックアウトしたリポジトリのディレクトリとしてい"
"ます):"

#. type: Plain text
#: Building-and-installing.md:18
#, no-wrap
msgid "    git clone https://github.com/githwxi/ATS-Postiats.git ~/postiats\n"
msgstr "    git clone https://github.com/githwxi/ATS-Postiats.git ~/postiats\n"

#. type: Plain text
#: Building-and-installing.md:20
msgid ""
"Set PATH to include the directory ~/postiats/bin so that the second half of "
"the building process knows where to locate the created \"patsopt\"."
msgstr ""
"~/postiats/bin ディレクトリを PATH に含めてください。\n"
"これはビルドプロセスの後半が生成された \"patsopt\" を使うためです。"

#. type: Plain text
#: Building-and-installing.md:22
msgid "Now, build ATS2:"
msgstr "そして ATS2 をビルドします:"

#. type: Plain text
#: Building-and-installing.md:27
msgid ""
"``` make -f Makefile_devl all ``` This command effectively executes both of "
"the following:"
msgstr ""
"```\n"
"make -f Makefile_devl all\n"
"```\n"
"\n"
"このコマンドは実際には次も実行してくれます:"

#. type: Plain text
#: Building-and-installing.md:32
msgid ""
"``` make -f codegen/Makefile_atslib # this is only needed for the first time "
"make -f Makefile_devl ```"
msgstr ""
"```\n"
"make -f codegen/Makefile_atslib # これは最初の make -f Makefile_devl を実行す"
"るときのみ必要です\n"
"```"

#. type: Plain text
#: Building-and-installing.md:34
msgid ""
"Optionally, put `~/postiats/bin` on your PATH, e.g., by adding the following "
"line to your `.bashrc`:"
msgstr ""
"必要なら、自分の PATH にも `~/postiats/bin` を含めてください。\n"
"例えば、次のような行を `.bashrc` に追加するでしょう:"

#. type: Plain text
#: Building-and-installing.md:36
#, no-wrap
msgid "    export PATH=${PATH}:${HOME}/postiats/bin\n"
msgstr "    export PATH=${PATH}:${HOME}/postiats/bin\n"

#. type: Plain text
#: Building-and-installing.md:38
msgid "Finally, a couple of environmental variables need to be properly set:"
msgstr "最後に、2つの環境変数を適切に設定する必要があります:"

#. type: Plain text
#: Building-and-installing.md:40
#, no-wrap
msgid "    export PATSHOME=${HOME}/postiats #For the example install above, or wherever ATS2 is located.\n"
msgstr "    export PATSHOME=${HOME}/postiats # このインストール例の場合です。もしくは ATS2 の位置を指定してください。\n"

#. type: Plain text
#: Building-and-installing.md:43
msgid ""
"If you also want to use ats2-lang-contrib, then please set the environmental "
"variable PATSHOMERELOC to the name of the directory where ats2-lang-contrib "
"resides."
msgstr ""
"ats2-lang-contrib も使うのであれば、環境変数 PATSHOMERELOC に ats2-lang-"
"contrib が置かれたディレクトリの名前を設定してください。"

#. type: Plain text
#: Building-and-installing.md:45
msgid "## What to try if the build of ATS/Postiats fails"
msgstr "## もし ATS/Postiats のビルドに失敗したら何をすべきでしょうか"

#. type: Plain text
#: Building-and-installing.md:47
msgid "Should the build fail at some point, it may be necessary to clean up:"
msgstr ""
"どこかでビルドが失敗してしまうのであれば、クリーンアップする必要があるかもし"
"れません:"

#. type: Plain text
#: Building-and-installing.md:49
#, no-wrap
msgid "    make -C src cleanall\n"
msgstr "    make -C src cleanall\n"

#. type: Plain text
#: Building-and-installing.md:51
msgid "If that does not work, it is worth trying to clean up ATSLIB as well:"
msgstr "それでもうまくいかない場合、ATSLIB もクリーンアップしてみてください:"

#. type: Plain text
#: Building-and-installing.md:53
#, no-wrap
msgid "    make -f codegen/Makefile_atslib cleanall\n"
msgstr "    make -f codegen/Makefile_atslib cleanall\n"

#. type: Plain text
#: Building-and-installing.md:55
msgid ""
"The above make rule should be executed whenever one wishes to use updated "
"[ATSLIB] code from the upstream github repository."
msgstr ""
"github リポジトリで更新された [ATSLIB] コードを使うときは、上記の make ター"
"ゲットを必ず実行すべきです。"

#. type: Plain text
#: Building-and-installing.md:57
msgid "## Install ATS using package system"
msgstr "## パッケージシステムを使って ATS をインストールする"

#. type: Plain text
#: Building-and-installing.md:59
msgid "### Debian GNU/Linux unstable(sid)"
msgstr "### Debian GNU/Linux unstable(sid)"

#. type: Plain text
#: Building-and-installing.md:63
msgid "``` $ sudo apt-get install ats2-lang ```"
msgstr ""
"```\n"
"$ sudo apt-get install ats2-lang\n"
"```"

#. type: Plain text
#: Building-and-installing.md:65
msgid "## ATS in a virtual machine"
msgstr "## 仮想環境での ATS"

#. type: Plain text
#: Building-and-installing.md:67
msgid "ATS can be installed in a docker container using the following command:"
msgstr "ATS は次コマンドで docker コンテナにインストールすることができます:"

#. type: Plain text
#: Building-and-installing.md:71
msgid "``` docker run -ti -v [your source directory]:/src steinwaywhw/ats ```"
msgstr ""
"```\n"
"docker run -ti -v [your source directory]:/src steinwaywhw/ats\n"
"```"

#. type: Plain text
#: Building-and-installing.md:74
msgid ""
"This gives you the ability to edit/compile any ATS code on any platform as "
"long as docker is installed.  More information and the docker install file "
"is available at https://github.com/steinwaywhw/docker-ats."
msgstr ""
"docker さえインストールされていれば、どんなプラットフォームでもどんな ATS "
"コードも編集/コンパイルできます。\n"
"さらなる情報と docker インストールファイルが https://github.com/steinwaywhw/"
"docker-ats から入手できます。"

#. type: Plain text
#: Building-and-installing.md:76
msgid ""
"A Vagrantfile could be written based on that Dockerfile, which enables "
"booting up a real virtual machine (instead of a container)."
msgstr ""
"Vagrantfile をこの Dockerfile を元にして書くこともできます。\n"
"(コンテナの代わりに) 実際の仮想マシンで起動することもできるでしょう。"

#. type: Plain text
#: Building-and-installing.md:78
msgid ""
"[1]: http://www.ats-lang.org/DOWNLOAD [2]: https://github.com/githwxi/ATS-"
"Postiats"
msgstr ""
"[1]: http://www.ats-lang.org/DOWNLOAD\n"
"[2]: https://github.com/githwxi/ATS-Postiats"

#. type: Plain text
#: Internal-types.md:2
msgid ""
"Internal types are introduced in the file `pats_staexp2.sats`, and having a "
"better understanding of how these types relate to actual ATS types will be "
"[[helpful in debugging|Error messages]]."
msgstr ""
"内部の型は `pats_staexp2.sats` ファイルで導入されています。これらの型がどのよ"
"うに実際の ATS の型に結び付いているのか理解することは [デバッグの役に立つ]"
"(Error-messages.md) でしょう。"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Eapp` - an application term."
msgstr "`S2Eapp` - 関数適用の項"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Ecst` - a type constant (for instance, int, bool, list, etc.)"
msgstr "`S2Ecst` - 型定数 (例: int, bool, list, など)"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Eeff` - function effects."
msgstr "`S2Eeff` - 関数の作用"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Eexi` - an existentially quantified type."
msgstr "`S2Eexi` - 存在量化された型"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Eint` - machine precision integer."
msgstr "`S2Eint` - マシン精度整数"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid ""
"`S2Eintinf` - infinite precision integer; commonly used for integer sorts in "
"most compiled versions of atsopt (patsopt)."
msgstr ""
"`S2Eintinf` - 任意精度整数; atsopt (patsopt) のほとんどのバージョンにおいて整"
"数種として一般に利用されます"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Evar` - a (typically universally quantified) variable."
msgstr "`S2Evar` - (一般に全勝量化された) 変数"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Etop (0; T)` means `T?` `//Need to verify in ATS2`"
msgstr "`S2Etop (0; T)` は `T?` を意味します `//Need to verify in ATS2`"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid "`S2Etop (1; T)` means `T?!` `//Need to verify in ATS2`"
msgstr "`S2Etop (1; T)` は `T?!` を意味します `//Need to verify in ATS2`"

#. type: Bullet: '* '
#: Internal-types.md:12
msgid ""
"`S2EVar` - an (existentially quantified) unification variable introduced by "
"the typechecker."
msgstr ""
"`S2EVar` - 型検査器によって導入された (存在量化された) ユニフィケーション変数"

#. type: Plain text
#: internationalization.md:2
msgid ""
"The first (and so far only) translation effort for ATS content is in "
"Japanese. There is a workflow for translating the wiki and keeping it up to "
"date using [po4a](http://po4a.alioth.debian.org/)."
msgstr ""

#. type: Plain text
#: internationalization.md:4
msgid ""
"![Image of Wiki Internationalization Workflow](https://raw.githubusercontent."
"com/jats-ug/ATS-Postiats-wiki/translate_ja/draw/translate_flow.png)"
msgstr ""

#. type: Plain text
#: internationalization.md:6
msgid ""
"In the above workflow (and the example below of executing the workflow), \"ja"
"\" is the directory for end-result of the translated wiki. The repository "
"for the Japanese wiki is located at https://github.com/jats-ug/ATS-Postiats-"
"wiki/."
msgstr ""

#. type: Plain text
#: internationalization.md:8
msgid "## Example run"
msgstr ""

#. type: Plain text
#: internationalization.md:10
msgid "### Git pull upstream master"
msgstr ""

#. type: Plain text
#: internationalization.md:25
#, no-wrap
msgid ""
"```\n"
"$ pwd\n"
"/home/kiwamu/doc/ATS-Postiats-wiki.jats-ug\n"
"$ git branch -a\n"
"* master\n"
"  translate_ja\n"
"  remotes/origin/HEAD -> origin/master\n"
"  remotes/origin/master\n"
"  remotes/origin/translate_ja\n"
"  remotes/upstream/master\n"
"$ grep -C 1 url .git/config\n"
"[remote \"origin\"]\n"
"        url = git@github.com:jats-ug/ATS-Postiats-wiki.git\n"
"        fetch = +refs/heads/*:refs/remotes/origin/*\n"
"--\n"
msgstr ""

#. type: Plain text
#: internationalization.md:53
#, no-wrap
msgid ""
"[remote \"upstream\"]\n"
"        url = https://github.com/githwxi/ATS-Postiats.wiki.git\n"
"        fetch = +refs/heads/*:refs/remotes/upstream/*\n"
"$ git pull upstream master\n"
"remote: Counting objects: 3, done.\n"
"remote: Compressing objects: 100% (3/3), done.\n"
"remote: Total 3 (delta 2), reused 0 (delta 0)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/githwxi/ATS-Postiats.wiki\n"
" * branch            master     -> FETCH_HEAD\n"
"   8fb40af..f410a52  master     -> upstream/master\n"
"Updating c578a11..f410a52\n"
"Fast-forward\n"
" ATS-LF.md => ATSLF.md                                               |\n"
"10 +++++-----\n"
" Building-and-installing.md                                          |  4 ++--\n"
" contrib.md => Contrib.md                                            |  6 ++----\n"
" ATS-Libraries-and-C-Library-bindings.md => Contributed-Libraries.md |  0\n"
" TODO.md                                                             |  2 ++\n"
" atsdoc.md                                                           |  5 ++++-\n"
" atslib.md                                                           |  2 +-\n"
" 7 files changed, 16 insertions(+), 13 deletions(-)\n"
" rename ATS-LF.md => ATSLF.md (55%)\n"
" rename contrib.md => Contrib.md (93%)\n"
" rename ATS-Libraries-and-C-Library-bindings.md =>\n"
"Contributed-Libraries.md (100%)\n"
"```\n"
msgstr ""

#. type: Plain text
#: internationalization.md:55
msgid "### Git merge changes into translate_ja"
msgstr ""

#. type: Plain text
#: internationalization.md:81
#, no-wrap
msgid ""
"```\n"
"$ git branch\n"
"* master\n"
"  translate_ja\n"
"$ git checkout translate_ja\n"
"Switched to branch 'translate_ja'\n"
"Your branch is up-to-date with 'origin/translate_ja'.\n"
"$ git merge master\n"
"Auto-merging Contrib.md\n"
"Auto-merging ATSLF.md\n"
"Merge made by the 'recursive' strategy.\n"
" ATS-LF.md => ATSLF.md                                               |\n"
"10 +++++-----\n"
" Building-and-installing.md                                          |  4 ++--\n"
" contrib.md => Contrib.md                                            |  6 ++----\n"
" ATS-Libraries-and-C-Library-bindings.md => Contributed-Libraries.md |  0\n"
" TODO.md                                                             |  2 ++\n"
" atsdoc.md                                                           |  5 ++++-\n"
" atslib.md                                                           |  2 +-\n"
" 7 files changed, 16 insertions(+), 13 deletions(-)\n"
" rename ATS-LF.md => ATSLF.md (55%)\n"
" rename contrib.md => Contrib.md (93%)\n"
" rename ATS-Libraries-and-C-Library-bindings.md =>\n"
"Contributed-Libraries.md (100%)\n"
"```\n"
msgstr ""

#. type: Plain text
#: internationalization.md:83
msgid "### Updatepo"
msgstr ""

#. type: Plain text
#: internationalization.md:101
msgid ""
"``` $ make updatepo po4a-updatepo -M utf8 -f text -m compiler-errors.md -m "
"Scientific-Computing.md -m Built-in-operators.md -m Building-and-installing."
"md -m Internal-types.md -m tutorials.md -m Strings.md -m safety.md -m ATSLF."
"md -m Stack-and-heap-allocation.md -m Rosetta-Stone.md -m atslib.md -m Home."
"md -m code-generation.md -m typechecking-errors.md -m Contributed-Libraries."
"md -m FAQ.md -m dataviewtype.md -m runtime-errors.md -m staload.md -m Built-"
"in-constraint-solving.md -m overload.md -m char.md -m Memory-leaks.md -m "
"Typechecking-directives.md -m README.md -m type.md -m effects.md -m "
"atspkgreloc.md -m Built-in-datatypes.md -m TODO.md -m loops.md -m dynload.md "
"-m Error-messages.md -m Code-optimization.md -m sort.md -m Frequently-asked-"
"questions.md -m atsdoc.md -m template.md -m Contrib.md -m Compiling-ATS-code."
"md -m Style-guide.md -p po/ja."
"po ........................................................................ "
"done.  $ git diff|tail -20"
msgstr ""

#. type: Plain text
#: internationalization.md:119
#, no-wrap
msgid ""
" #. type: Plain text\n"
"-#: char.md:37\n"
"-#, no-wrap\n"
"+#: Contrib.md:25\n"
" msgid \"\"\n"
"-\"```ocaml\\n\"\n"
"-\"(*\\n\"\n"
"-\"   HX: the return is dynamically allocated\\n\"\n"
"-\"*)\\n\"\n"
"-\"fun tostring_char\\n\"\n"
"-\"  (c: char):<> strnptr(1) = \\\"mac#%\\\"\\n\"\n"
"-\"overload tostring with tostring_char\\n\"\n"
"-\"```\\n\"\n"
"+\"In order to switch between using these various packages, [[atspkgreloc|\"\n"
"+\"atspkgreloc]] is a useful tool that may automate the process. It can \"\n"
"+\"additionally be used with other repositories or forms of code storage.\"\n"
" msgstr \"\"\n"
msgstr ""

#. type: Plain text
#: internationalization.md:122
#, no-wrap
msgid ""
" #. type: Plain text\n"
"```\n"
msgstr ""

#. type: Plain text
#: internationalization.md:124
msgid "### Translate using gettext"
msgstr ""

#. type: Plain text
#: internationalization.md:146
#, no-wrap
msgid ""
"```\n"
"$ make\n"
"po4a-translate -M utf8 -f text -k 0 -m compiler-errors.md -p po/ja.po\n"
"-l ja/compiler-errors.md\n"
"po4a-translate -M utf8 -f text -k 0 -m Scientific-Computing.md -p\n"
"po/ja.po -l ja/Scientific-Computing.md\n"
"po4a-translate -M utf8 -f text -k 0 -m Built-in-operators.md -p\n"
"po/ja.po -l ja/Built-in-operators.md\n"
"--snip--\n"
"po4a-translate -M utf8 -f text -k 0 -m Contrib.md -p po/ja.po -l ja/Contrib.md\n"
"po4a-translate -M utf8 -f text -k 0 -m Compiling-ATS-code.md -p\n"
"po/ja.po -l ja/Compiling-ATS-code.md\n"
"po4a-translate -M utf8 -f text -k 0 -m Style-guide.md -p po/ja.po -l\n"
"ja/Style-guide.md\n"
"$ git status\n"
"On branch translate_ja\n"
"Your branch is ahead of 'origin/translate_ja' by 21 commits.\n"
"  (use \"git push\" to publish your local commits)\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
msgstr ""

#. type: Plain text
#: internationalization.md:153
#, no-wrap
msgid ""
"        modified:   ja/Building-and-installing.md\n"
"        modified:   ja/Frequently-asked-questions.md\n"
"        modified:   ja/TODO.md\n"
"        modified:   ja/atsdoc.md\n"
"        modified:   ja/atslib.md\n"
"        modified:   po/ja.po\n"
msgstr ""

#. type: Plain text
#: internationalization.md:156
#, no-wrap
msgid ""
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
msgstr ""

#. type: Plain text
#: internationalization.md:160
#, no-wrap
msgid ""
"        ja/ATSLF.md\n"
"        ja/Contrib.md\n"
"        ja/Contributed-Libraries.md\n"
msgstr ""

#. type: Plain text
#: internationalization.md:164
msgid ""
"no changes added to commit (use \"git add\" and/or \"git commit -a\")  $ git "
"diff ja/Building-and-installing.md | tail +If that does not work, it is "
"worth trying to clean up ATSLIB as well:"
msgstr ""

#. type: Plain text
#: internationalization.md:166
#, no-wrap
msgid "     make -f codegen/Makefile_atslib cleanall\n"
msgstr "     make -f codegen/Makefile_atslib cleanall\n"

#. type: Plain text
#: internationalization.md:170
#, no-wrap
msgid ""
" The above make rule should be executed whenever one wishes to use updated\n"
"-[atslib] code from the upstream github repository.\n"
"+[ATSLIB] code from the upstream github repository.\n"
msgstr ""
" The above make rule should be executed whenever one wishes to use updated\n"
"-[atslib] code from the upstream github repository.\n"
"+[ATSLIB] code from the upstream github repository.\n"

#. type: Plain text
#: internationalization.md:173
#, no-wrap
msgid ""
" ## ATS in a virtual machine\n"
"```\n"
msgstr ""
" ## ATS in a virtual machine\n"
"```\n"

#. type: Plain text
#: internationalization.md:175
msgid "### Publish it"
msgstr ""

#. type: Plain text
#: internationalization.md:192
#, no-wrap
msgid ""
"```\n"
"$ git add .\n"
"$ git commit -m update\n"
"[translate_ja 4c55ee8] update\n"
" 9 files changed, 466 insertions(+), 293 deletions(-)\n"
" create mode 100644 ja/ATSLF.md\n"
" create mode 100644 ja/Contrib.md\n"
" create mode 100644 ja/Contributed-Libraries.md\n"
"$ git push\n"
"Counting objects: 58, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (57/57), done.\n"
"Writing objects: 100% (58/58), 11.82 KiB | 0 bytes/s, done.\n"
"Total 58 (delta 35), reused 0 (delta 0)\n"
"To git@github.com:jats-ug/ATS-Postiats-wiki.git\n"
"   1c3b274..4c55ee8  translate_ja -> translate_ja\n"
"```\n"
msgstr ""

#. type: Bullet: '* '
#: operating-systems.md:2
msgid "For kernels and drivers in ATS, see [[kernels|kernels]]."
msgstr ""

#. type: Bullet: '* '
#: operating-systems.md:2
msgid ""
"For operating systems supporting ATS development, currently Linux, Mac OS X, "
"and Windows/Cygwin are supported, but see the [download page](http://www.ats-"
"lang.org/DOWNLOAD/) for more information."
msgstr ""

#. type: Plain text
#: tutorials.md:2
msgid ""
"For a beginner, perhaps the most important tool to learn is *good functional "
"style* and *abstraction*. This [code example for a calculator](http://www.cs."
"bu.edu/~hwxi/academic/courses/CS320/Spring13/code/calculator/), while not "
"exactly a tutorial, demonstrates these principles. [Discussion on the "
"calculator example is located here](https://groups.google.com/forum/?"
"fromgroups=#!topic/ats-lang-users/ad5S6SY0I0E)."
msgstr ""

#. type: Plain text
#: tutorials.md:4
msgid ""
"Currently, the ATS site has [several tutorials and references](http://www."
"ats-lang.org/DOCUMENT/), several of which are described below. There is also "
"a more [dense tutorial or language overview reference](http://cs.likai.org/"
"ats/ml-programmers-guide-to-ats) that is highly recommended."
msgstr ""

#. type: Bullet: '* '
#: tutorials.md:8
msgid ""
"Chris Double has written [many blogs on ATS](http://www.bluishcoder.co.nz/"
"tags/ats/). There are also [many useful topical tutorials](http://www.ats-"
"lang.org/htdocs-old/TUTORIAL/tutorial.html) on the ATS site. Of course, "
"there may be [resources not mentioned here](https://www.google.com/search?"
"as_q=ATS+language&as_epq=&as_oq=tutorial+blog"
"+programming&as_eq=&as_nlo=&as_nhi=&lr=&cr=&as_qdr=all&as_sitesearch=&as_occt=any&safe=images&tbs=&as_filetype=&as_rights=)."
msgstr ""

#. type: Bullet: '* '
#: tutorials.md:8
msgid ""
"[[A Tutorial on Programming Features in ATS|http://www.ats-lang.org/DOCUMENT/"
"ATS2TUTORIAL/HTML/book1.html]] covers several topics common to many "
"programming languaages, as well as some tutorials on linear types."
msgstr ""

#. type: Bullet: '* '
#: tutorials.md:8
msgid ""
"[Graphics tutorial using ATS/Cairo](http://www.ats-lang.org/DOCUMENT/"
"ATS2CAIRO/HTML/book1.html)."
msgstr ""

#. type: Plain text
#: tutorials.md:10
msgid "## Algorithms in ATS"
msgstr ""

#. type: Plain text
#: tutorials.md:12
#, no-wrap
msgid "**[[The ATS Book|http://www.ats-lang.org/DOCUMENT/INT2PROGINATS/HTML/book1.html]]** is a good source of algorithms at various levels of rigor.\n"
msgstr ""

#. type: Plain text
#: tutorials.md:14
#, no-wrap
msgid "**Rosetta Code** has several [entries for ATS](http://rosettacode.org/wiki/Category:ATS).\n"
msgstr ""

#. type: Plain text
#: tutorials.md:16
msgid ""
"Once familiar enough with the language, [[ATSLIB|ATSLIB]] is also a great "
"source to find many algorithms implemented in ATS, sometimes in several "
"different ways (linear, non-linear, etc.)"
msgstr ""

#. type: Plain text
#: tutorials.md:18
msgid "## Other small tutorials"
msgstr ""

#. type: Plain text
#: tutorials.md:20
msgid "An example demonstrating [dataviewtype]s."
msgstr ""

#. type: Plain text
#: tutorials.md:21
msgid ""
"An [ATS wiki book](http://en.wikibooks.org/wiki/ATS:"
"_Programming_with_Theorem-Proving) exists, but currently only has a few "
"pages (and appears to be rather dated, i.e. uses ATS1)."
msgstr ""

#. type: Plain text
#: Strings.md:2
msgid ""
"There are many different string types available in ATS2 (see some of these "
"in `prelude/basics_sta.sats`). Which should be used?"
msgstr ""

#. type: Plain text
#: Strings.md:4
msgid "For something relatively small, using 'strptr1' for strings is fine."
msgstr ""

#. type: Plain text
#: Strings.md:7
msgid ""
"For something more complicated that requires sharing of strings, one may "
"want to use ref-counted strings. In ATS2, there is a type [strobjref]"
"(https://github.com/githwxi/ATS-Postiats/blob/master/libats/SATS/strobjref."
"sats) for reference-counted strings."
msgstr ""

#. type: Plain text
#: Strings.md:10
msgid ""
"At the beginning of a project, it is usually uncertain what kind of string "
"is needed.  An abstract type can be introduced:"
msgstr ""

#. type: Plain text
#: Strings.md:14
msgid "```ocaml absviewtype mystring (l:addr)  ```"
msgstr ""

#. type: Plain text
#: Strings.md:17
msgid ""
"First, `mystring` can be implemented based on `strptr`. Later, the "
"implementation can be easily changed, making it based on `strobjref` or "
"something else."
msgstr ""

#. type: Plain text
#: Strings.md:21
msgid ""
"In practice, if string sharing is allowed. then memory leaks are often very "
"difficult to prevent.  For instance, there are many leaks in graphviz "
"(according to bug reports). ATS is very good for stopping this kind of "
"problems[\\[1\\]][1]."
msgstr ""

#. type: Plain text
#: Strings.md:22
msgid ""
"[1]: https://groups.google.com/d/msg/ats-lang-users/MrWe5tFnR_8/4uTj6ER67OoJ"
msgstr ""

#. type: Plain text
#: Frequently-asked-questions.md:2
msgid "### Why does my code typecheck but not compile?"
msgstr ""
"### なぜ私のコードは型検査に通ったにもかかわらずコンパイルできないのです"
"か？\n"

#. type: Plain text
#: Frequently-asked-questions.md:4
msgid ""
"There could be several reasons, but please note specially the one in the "
"[[compiler errors|compiler errors]] article referring to `share/"
"atspre_staload.hats`."
msgstr ""
"いくつかの理由が考えられますが、特に [コンパイルエラー](compiler-errors.md) "
"の記事にある `share/atspre_staload.hats` に注意してください。"

#. type: Plain text
#: Frequently-asked-questions.md:6
msgid ""
"### ATS library code is GPLv3, so does this mean my compiled code also must "
"be GPLv3?**"
msgstr ""
"### ATS ライブラリコードが GPLv3 ということは、コンパイルされた私のコードも "
"GPLv3 で配布しなければならないのですか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:8
#, no-wrap
msgid "***Short answer***: **No**.\n"
msgstr "***短かい答***: **いいえ**.\n"

#. type: Plain text
#: Frequently-asked-questions.md:10
#, no-wrap
msgid "***Long answer***: Think of the ATS2 compiler (ATS/Postiats) as if it were GCC.\n"
msgstr "***長い答***: ATS2 コンパイラ (ATS/Postiats) を GCC のように考えてください。\n"

#. type: Plain text
#: Frequently-asked-questions.md:13
msgid ""
"If one uses GCC to generate object code from C source one owns, then one "
"owns the generated object code. Then if you use ATS/Postiats to generate C "
"code from ATS source you own, then you own the generated C code."
msgstr ""
"GCC を使って所有するC言語ソースコードからオブジェクトを生成すると、あなたは生"
"成されたオブジェクトを所有することになります。そして、ATS/Postiats を使ってあ"
"なたが所有する ATS ソースコードからC言語コードを生成すると、生成されたC言語"
"コードを所有することになります。"

#. type: Plain text
#: Frequently-asked-questions.md:15
#, no-wrap
msgid "***Longer answer***: \n"
msgstr "***より長い答***: \n"

#. type: Plain text
#: Frequently-asked-questions.md:23
msgid ""
"[[ATSLIB|ATSLIB]] is primarily used to generate C code, and the generated C "
"code, which is owned by the author of its ATS source, can be compiled as "
"long as the header files (that is, CATS-files) in ATS2-Postiats-include are "
"available. Currently, ATS2-Postiats-include-0.1.1.tgz is released separately "
"under a BSD-like license. Related to this, the preferred way to write "
"portable ATS code should avoid using `-latslib` to generate executables."
msgstr ""
"[ATSLIB](ATSLIB.md) は第一にC言語コードを生成するために使われます。そして、そ"
"の ATS ソースコードの作者によって所有された生成済みC言語コードは、ATS2-"
"Postiats-include のヘッダファイル (つまり CATS ファイル) さえあればコンパイル"
"できます。現時点では、ATS2-Postiats-include-0.1.1.tgz は BSD ライクライセンス"
"の下で独立してリリースされています。これに関連しますが、ポータブルな ATS コー"
"ドを書くのであれば、実行オブジェクトの生成時に `-latslib` オプションを使わな"
"いことをおすすめします。"

#. type: Plain text
#: Frequently-asked-questions.md:25
msgid "Another analogy is taken from a GNU-related site:"
msgstr ""

#. type: Plain text
#: Frequently-asked-questions.md:29
#, no-wrap
msgid ""
"*Question*: Can I use GPL-covered editors such as GNU Emacs to develop non-free\n"
"programs? Can I use GPL-covered tools such as GCC to compile them?\n"
"(#CanIUseGPLToolsForNF)\n"
msgstr ""

#. type: Plain text
#: Frequently-asked-questions.md:43
#, no-wrap
msgid ""
"*Answer*: Yes, because the copyright on the editors and tools does not cover the\n"
"code you write. Using them does not place any restrictions, legally, on\n"
"the license you use for your code. Some programs copy parts of themselves into \n"
"the output for technical reasons—for example, Bison copies a standard parser \n"
"program into its output file. In such cases, the copied text in the output is covered \n"
"by the same license that covers it in the source code. Meanwhile, the part of\n"
"the output which is derived from the program's input inherits the\n"
"copyright status of the input. As it happens, Bison can also be used \n"
"to develop non-free programs.\n"
"This is because we decided to explicitly permit the use of the Bison\n"
"standard parser program in Bison output files without restriction. We made\n"
"the decision because there were other tools comparable to Bison which\n"
"already permitted use for non-free programs.\n"
msgstr ""

#. type: Plain text
#: Frequently-asked-questions.md:45
msgid ""
"### Where can I find information on common pitfalls? Where can I ask newbie "
"questions about writing ATS code?"
msgstr ""
"### よくありがちな落とし穴に関する情報はどこにありますか？ATS コードを書く際"
"に初心者的な質問をどこで聞くことができますか？**\n"

#. type: Plain text
#: Frequently-asked-questions.md:47
msgid ""
"First, read one of the [official tutorials][1]. Second, [these ATS "
"programming tips][2] may be helpful. Third, there is a Google group, [ats-"
"lang-users][3] for asking any kind of question, no matter how trivial, "
"including slightly off-topic or less general-interest issues. Fourth, some "
"of the discussions on the [SourceForge mailing list archive][4] may also "
"prove instructive. Fifth, for other community resources, see the [official "
"community page][5]."
msgstr ""
"1番目に、[公式のチュートリアル][1] を読んでください。\n"
"2番目に、[ATS プログラミングのヒント][2] が助けになるかもしれません。\n"
"3番目に、そのような質問をするための Google グループ [ats-lang-users][3] があ"
"ります。どんなに自明でも、少しオフトピックがあっても、一般に興味がないと思わ"
"れる事柄でもかまいません。\n"
"4番目に、[SourceForge のメーリングリスト][4] での議論も有益かもしれません。\n"
"5番目に、その他のコミュニティについては [公式のコミュニティページ][5] を見て"
"ください。"

#. type: Plain text
#: Frequently-asked-questions.md:49
msgid ""
"For information about (the sometimes opaque) ATS error messages, see [[error "
"messages|Error messages]] on this wiki."
msgstr ""
"(時にあいまいな) ATS のエラーメッセージについては、この wiki の [エラーメッ"
"セージ](Error-messages.md) を参照してください。"

#. type: Plain text
#: Frequently-asked-questions.md:51
msgid ""
"If you are not highly practiced with functional programming, it may be best "
"to learn some [Standard ML][6] before learning ATS. The aid of [SML "
"textbook(s) or introductory ATS notes][7] may be helpful."
msgstr ""
"もし関数型プログラミングの熟練者でなければ、ATS を学ぶ前になんらかの "
"[Standard ML][6] 言語を学んだ方が良いかもしれません。[SML textbook(s) or "
"introductory ATS notes][7] がその助けになるかもしれません。"

#. type: Plain text
#: Frequently-asked-questions.md:59
msgid ""
"[1]: http://www.ats-lang.org/DOCUMENT/#ATSINTRObook [2]: http://scg.ece.ucsb."
"edu/software/notes.pdf [3]: https://groups.google.com/forum/?fromgroups#!"
"forum/ats-lang-users [4]: https://sourceforge.net/mailarchive/forum.php?"
"forum_name=ats-lang-users [5]: http://www.ats-lang.org/COMMUNITY/# [6]: "
"http://en.wikipedia.org/wiki/Standard_ML [7]: http://www.cs.bu.edu/~hwxi/"
"academic/courses/Spring13/CS320.html"
msgstr ""
"[1]: http://www.ats-lang.org/DOCUMENT/#ATSINTRObook\n"
"[2]: http://scg.ece.ucsb.edu/software/notes.pdf\n"
"[3]: https://groups.google.com/forum/?fromgroups#!forum/ats-lang-users\n"
"[4]: https://sourceforge.net/mailarchive/forum.php?forum_name=ats-lang-"
"users\n"
"[5]: http://www.ats-lang.org/COMMUNITY/#\n"
"[6]: http://en.wikipedia.org/wiki/Standard_ML\n"
"[7]: http://www.cs.bu.edu/~hwxi/academic/courses/Spring13/CS320.html"

#. type: Plain text
#: Frequently-asked-questions.md:61
msgid "### Where can I find tutorials?"
msgstr "### チュートリアルはどこにありますか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:63
msgid ""
"See [[tutorials|Tutorials]] on this wiki, or the [Effective ATS series][26] "
"(also [on git][27]). Also see the answer to the previous question."
msgstr ""
"この wiki の [チュートリアル](tutorials.md) を参照してください。もしくは "
"[Effective ATS series][26] と [その git リポジトリ][27] も参考になります。ま"
"た、1つ前の質問に対する回答も読んでください。"

#. type: Plain text
#: Frequently-asked-questions.md:66
msgid "### Where can I find some code or algorithm examples?"
msgstr "### コードやアルゴリズムの例はどこにありますか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:68
msgid "Several examples can be found [here][8] (ATS1)."
msgstr "いくつかの例が [ここ][8] にあります。 (ATS1 の例になります)。"

#. type: Plain text
#: Frequently-asked-questions.md:70
msgid "[8]: http://www.ats-lang.org/htdocs-old/EXAMPLE/example.html"
msgstr "[8]: http://www.ats-lang.org/htdocs-old/EXAMPLE/example.html"

#. type: Plain text
#: Frequently-asked-questions.md:72
msgid "### Where can I find a reference or documentation?"
msgstr "### リファレンスやドキュメントはどこにありますか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:74
msgid ""
"For ATS, there is an unofficial (and incomplete) reference [available][9] "
"([source][10]). ATS2 has [automatically generated library documentation]"
"[11]. See the [[homepage|Home]] on this wiki for links to wiki pages "
"containing further documentation."
msgstr ""
"ATS1 については、非公式 (そして不完全な) リファレンスが [入手可能です][9]。\n"
"([そのソースコードもあります。][10])\n"
"ATS2 には [自動生成されたライブラリドキュメント][11] があります。\n"
"この wiki の [ホームページ](Home.md) には、より多くのドキュメントを含む wiki "
"ページへのリンクがあります。"

#. type: Plain text
#: Frequently-asked-questions.md:78
msgid ""
"[9]: http://www.bluishcoder.co.nz/ats/ats-reference.pdf [10]: https://github."
"com/doublec/ats-reference [11]: http://www.ats-lang.org/LIBRARY/"
msgstr ""
"[9]: http://www.bluishcoder.co.nz/ats/ats-reference.pdf\n"
"[10]: https://github.com/doublec/ats-reference\n"
"[11]: http://www.ats-lang.org/LIBRARY/"

#. type: Plain text
#: Frequently-asked-questions.md:80
msgid ""
"### I'm getting type errors or unsolved constraints, but everything looks "
"right. What might I be doing wrong?"
msgstr ""
"### 問題がないと思えるのに、型エラーや解決できない強制が発生します。私は何を"
"間違えているのでしょうか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:82
msgid ""
"Probably many things. Dependent types involve constraints; make sure you are "
"using the right type at every step and not accidentally mixing similar "
"types. There are many similar types in ATS (including functions with similar "
"types) used for dealing with slightly different situations. We recommend "
"*avoiding heavy use of dependent types when starting out* in order to avoid "
"finding yourself in a situation with unsolved constraints that is very "
"difficult to resolve. However, `if` and `case` expressions likely need to be "
"annotated with types in general."
msgstr ""
"おそらく、たくさんの原因があると考えられます。\n"
"依存型は強制を意味します。\n"
"あなたが正しい型をどの段階においても使っていて、意図せず似た型を混ぜてしまわ"
"ないか確かめます。\n"
"ATS にはたくさんの同じような型 (や同じような型を持つ関数) があります。\n"
"それらは少し違う状況を扱うために使われます。\n"
"*ATS に入門したばかりの間は依存型をあまり使わない* ことを推奨します。\n"
"それは解決困難な未解決の強制が起きるのを予防するためです。\n"
"けれども、一般的には `if` と `case` 式には型注釈を付ける必要があるでしょう。"

#. type: Plain text
#: Frequently-asked-questions.md:84
msgid ""
"If you use emacs, consider using [ATS Flymake][12] as a possible measure to "
"avoid such problems in the first place."
msgstr ""
"もし emacs を使っているなら、最初の段階でそのような問題を避けるために [ATS "
"Flymake][12] を使うことを検討してください。"

#. type: Plain text
#: Frequently-asked-questions.md:86
msgid ""
"For examples of what can go wrong and some solutions see the following "
"examples."
msgstr "発生する問題といくつかの解決策について、次の例を参照してください。"

#. type: Bullet: '  - '
#: Frequently-asked-questions.md:90
msgid "[Example 1][13]"
msgstr "[Example 1][13]"

#. type: Bullet: '  - '
#: Frequently-asked-questions.md:90
msgid "[Example 2][14]"
msgstr "[Example 2][14]"

#. type: Bullet: '  - '
#: Frequently-asked-questions.md:90
msgid "[Example 3][15]"
msgstr "[Example 3][15]"

#. type: Plain text
#: Frequently-asked-questions.md:92
msgid ""
"Finally, for some guidance on understanding certain errors, see [[error "
"messages|Error messages]] on this wiki."
msgstr ""
"最後に、ある種のエラーに対するガイドラインとして、この wiki の [エラーメッ"
"セージ](Error-messages.md) を参照してください。"

#. type: Plain text
#: Frequently-asked-questions.md:97
msgid ""
"[12]: http://www.reddit.com/r/ATS/comments/vx4lq/ats_flymake/ [13]: https://"
"sourceforge.net/mailarchive/forum.php?thread_name=Pine."
"LNX.4.64.1207201538580.21676%40csa2.bu.edu&forum_name=ats-lang-users [14]: "
"https://groups.google.com/forum/?fromgroups=#!topic/ats-lang-users/"
"bnROVnWcFMU [15]: https://groups.google.com/forum/?fromgroups=#!topic/ats-"
"lang-users/oFuXRr4K8ts"
msgstr ""
"[12]: http://www.reddit.com/r/ATS/comments/vx4lq/ats_flymake/\n"
"[13]: https://sourceforge.net/mailarchive/forum.php?thread_name=Pine."
"LNX.4.64.1207201538580.21676%40csa2.bu.edu&forum_name=ats-lang-users\n"
"[14]: https://groups.google.com/forum/?fromgroups=#!topic/ats-lang-users/"
"bnROVnWcFMU\n"
"[15]: https://groups.google.com/forum/?fromgroups=#!topic/ats-lang-users/"
"oFuXRr4K8ts"

#. type: Plain text
#: Frequently-asked-questions.md:99
msgid ""
"### I have two different types being used together in the same data "
"structure, and they typecheck! Is this a bug?"
msgstr ""
"### 同じデータ構造内で異なる2つの型を一緒に使ったのに、型検査を通ってしまいま"
"した!これはバグですか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:101
msgid ""
"After perhaps being exposed to the rigor of dependent types, one may "
"occasionally be surprised: but the short answer is it probably isn't a bug. "
"[Here][16] is an example where `list0` will accept multiple values, each "
"with a distinct type, as inputs (for example, `string`s, `float`s, or "
"`int`s). [Here][17] is an example with templates. The notion has to do with "
"[\"subtypes\"][18], and specifically, how ATS defines subtypes. This should "
"not be a problem in ATS2, and is one of the [major reasons for ATS2][19]."
msgstr ""
"依存型の厳格さを体感した後では、ときおり驚くことでしょう。\n"
"しかし短かい答えとして、それはおそらくバグではありません。\n"
"[これ][16] は入力として異なる型の値 (例えば `string`, `float`, `int`) を受け"
"付ける `list0` の例です。\n"
"[これ][17] はテンプレートにおける例です。\n"
"[サブタイピング][18]、とりわけ ATS がどのようにサブタイピングを定義するかに関"
"連することがあります。\n"
"これはATS2 における問題ではなく、[ATS2 のあるメジャーリリース][19] で起きたこ"
"とです。"

#. type: Plain text
#: Frequently-asked-questions.md:106
msgid ""
"[16]: http://www.ats-lang.org/DOCUMENT/INTPROGINATS/HTML/x1099.html [17]: "
"https://sourceforge.net/mailarchive/forum.php?thread_name=Pine."
"LNX.4.64.1204041554160.22282%40csa2.bu.edu&forum_name=ats-lang-users [18]: "
"http://en.wikipedia.org/wiki/"
"Covariance_and_contravariance_(computer_science)  [19]: https://sourceforge."
"net/mailarchive/forum.php?"
"thread_name=727FCEF6-16CE-4249-97B6-750CBB2B2371%40users.sourceforge."
"net&forum_name=ats-lang-users"
msgstr ""
"[16]: http://www.ats-lang.org/DOCUMENT/INTPROGINATS/HTML/x1099.html\n"
"[17]: https://sourceforge.net/mailarchive/forum.php?thread_name=Pine."
"LNX.4.64.1204041554160.22282%40csa2.bu.edu&forum_name=ats-lang-users\n"
"[18]: http://en.wikipedia.org/wiki/"
"Covariance_and_contravariance_(computer_science)\n"
"[19]: https://sourceforge.net/mailarchive/forum.php?"
"thread_name=727FCEF6-16CE-4249-97B6-750CBB2B2371%40users.sourceforge."
"net&forum_name=ats-lang-users"

#. type: Plain text
#: Frequently-asked-questions.md:108
msgid "### What are dependent types?"
msgstr "### 依存型とは何ですか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:110
msgid ""
"A [dependent type][20] is a type that depends on a value. As a simple "
"example in ATS, `int (5)` is a type such that all integers belonging to it "
"are equal to 5 (so it is in fact a singleton type)."
msgstr ""
"[依存型][20] は値に依存した型です。\n"
"ATS における単純な例として、`int (5)` は 5 と等しくなるような全ての整数である"
"ような型です。\n"
"そのため、これは実際にはシングルトン型です。"

#. type: Plain text
#: Frequently-asked-questions.md:112
msgid "[20]: http://en.wikipedia.org/wiki/Dependent_type"
msgstr "[20]: http://en.wikipedia.org/wiki/Dependent_type"

#. type: Plain text
#: Frequently-asked-questions.md:114
msgid "### What are linear types?"
msgstr "### 線形型とは何ですか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:116
msgid ""
"Linear types make use of [linear logic][21]. The notion of linear types may "
"be explained as viewing variables as resources that are consumed by "
"expressions, which allows for static resource tracking. For example, if you "
"consider the expression `(a or b)`, you've produced a new expression but "
"you've destroyed `a` and `b`. This is useful for dealing with memory "
"allocation safely and efficiently, for instance. For more information, see "
"the [ATS book][22], the [Wikipedia article on linear types][23], or [[linear "
"types|Linear types]] on this wiki."
msgstr ""
"線形型は [線形論理][21] を利用します。\n"
"線形型の概念は、静的なリソースの追跡ができる式によって消費されるリソースとし"
"ての観測値、と説明できます。\n"
"例えば、式 `(a or b)` を考えるとき、あなたは新しい式を生成しています。\n"
"しかし、あなたは `a` と `b` を破棄しなければなりません。\n"
"これは、例えば、安全で効果的なメモリ確保を扱うのに有用です。\n"
"より詳しくは、[ATSプログラミング入門][22]、[Wikipedia にある線形型に関する記"
"事][23]、この wiki の [線形型](Linear-types.md) を参照してください。"

#. type: Plain text
#: Frequently-asked-questions.md:120
msgid ""
"[21]: http://en.wikipedia.org/wiki/Linear_logic [22]: http://www.ats-lang."
"org/DOCUMENT/INTPROGINATS/HTML/c3217.html [23]: http://en.wikipedia.org/wiki/"
"Substructural_type_system#Linear_type_systems"
msgstr ""
"[21]: http://en.wikipedia.org/wiki/Linear_logic\n"
"[22]: http://www.ats-lang.org/DOCUMENT/INTPROGINATS/HTML/c3217.html\n"
"[23]: http://en.wikipedia.org/wiki/"
"Substructural_type_system#Linear_type_systems"

#. type: Plain text
#: Frequently-asked-questions.md:122
msgid "### Is there a Windows version of ATS?"
msgstr "### ATS には Windows 版がありますか？\n"

#. type: Plain text
#: Frequently-asked-questions.md:124
msgid ""
"Not for the near future, at least. However, you can install ATS on top of "
"[Cygwin][24] using the same build instructions as for other platforms."
msgstr ""
"少なくとも近い未来においては入手できません。\n"
"けれども、他のプラットフォームと同じビルド手順を使って、[Cygwin][24] 上に "
"ATS をインストールすることはできます。"

#. type: Plain text
#: Frequently-asked-questions.md:126
msgid ""
"You can also try ATS2 using [this experimental online tool][25], or try "
"using a virtual machine (see [[building and installing|Building and "
"installing]] ATS)."
msgstr ""
"また [実験的なオンラインツール][25] を使って ATS2 を試すこともできます。\n"
"もしくは仮想環境を使って試すこともできます。\n"
"ATS の [ビルドとインストール](Building-and-installing.md) を参照してくだい。"

#. type: Plain text
#: Frequently-asked-questions.md:129
msgid ""
"[24]: http://www.cygwin.com/ [25]: http://xrats.illtyped.com/code/patsopt"
msgstr ""
"[24]: http://www.cygwin.com/\n"
"[25]: http://xrats.illtyped.com/code/patsopt"

#. type: Plain text
#: Frequently-asked-questions.md:133
msgid ""
"[26]: http://www.ats-lang.org/EXAMPLE/EFFECTIVATS/ [27]: https://github.com/"
"githwxi/ATS-Postiats/tree/master/doc/EXAMPLE/EFFECTIVATS"
msgstr ""
"[26]: http://www.ats-lang.org/EXAMPLE/EFFECTIVATS/\n"
"[27]: https://github.com/githwxi/ATS-Postiats/tree/master/doc/EXAMPLE/"
"EFFECTIVATS"

#. type: Plain text
#: ATSLF.md:2
msgid ""
"ATS/LF ([Logical Framework](https://en.wikipedia.org/wiki/"
"Logical_framework)) supports a form of (interactive) theorem-proving; ATS "
"advocates a programmer-centric approach to program verification that "
"combines programming with theorem-proving in a syntactically intertwined "
"manner."
msgstr ""

#. type: Plain text
#: ATSLF.md:4
msgid "## Axioms, Proofs, and Theorems"
msgstr ""

#. type: Bullet: '* '
#: ATSLF.md:9
msgid "axiom - `praxi`; it states a theorem without proof."
msgstr ""

#. type: Bullet: '* '
#: ATSLF.md:9
msgid "proof - `prfn`; it is the non-recursive version of prfun"
msgstr ""

#. type: Bullet: '* '
#: ATSLF.md:9
msgid ""
"proof - `prfun`; it states a theorem where the author is required to give a "
"proof. In ATS2, the requirement is not currently enforced, making prfun "
"similar to praxi in practice [\\[1\\]][1]."
msgstr ""

#. type: Bullet: '* '
#: ATSLF.md:9
msgid ""
"theorem - `prop`; it is for classifying a type in ATS that represents a "
"theorem."
msgstr ""

#. type: Plain text
#: ATSLF.md:11
msgid ""
"Note that proof functions can (and should) be implemented using the "
"`primplement` keyword, similar to `implement` for dynamic function "
"implementations. More details can be found in the ATS2 Book."
msgstr ""

#. type: Plain text
#: ATSLF.md:13
msgid ""
"[1]: https://groups.google.com/d/msg/ats-lang-users/enDXT0GaoaM/HKJcjCJSdoYJ)"
msgstr ""

#. type: Plain text
#: safety.md:2
msgid ""
"ATS2 has many safety features, though they are not all obvious. Here we list "
"a few examples"
msgstr ""

#. type: Bullet: '*  '
#: safety.md:3
msgid ""
"[Arithmetic overflow](../tree/master/doc/EXAMPLE/MISC/arith_overflow.dats)"
msgstr ""

#. type: Plain text
#: Contrib.md:2
msgid "## Downloading Contrib"
msgstr ""

#. type: Plain text
#: Contrib.md:4
msgid ""
"Releases are currently available [[at sourceforge|https://sourceforge.net/"
"projects/ats2-lang-contrib/]], though those developing libraries for ATS "
"contrib should use the [[github repository|https://github.com/githwxi/ATS-"
"Postiats-contrib]]."
msgstr ""

#. type: Plain text
#: Contrib.md:6
msgid "## Setting up for using Contrib"
msgstr ""

#. type: Plain text
#: Contrib.md:8
msgid ""
"An example of how to set up environment variables for ATS-contrib (alongside "
"ATS):"
msgstr ""

#. type: Plain text
#: Contrib.md:12
msgid ""
"```bash export POSTIATS=${HOME}/research/Postiats/git export "
"POSTIATS_contrib=${HOME}/research/Postiats-contrib/git"
msgstr ""

#. type: Plain text
#: Contrib.md:14
msgid "######"
msgstr ""

#. type: Plain text
#: Contrib.md:18
msgid ""
"export PATSHOME=${POSTIATS} export PATSHOMERELOC=${POSTIATS_contrib} ```"
msgstr ""

#. type: Plain text
#: Contrib.md:21
msgid "## Using ATS Contrib"
msgstr ""

#. type: Plain text
#: Contrib.md:24
msgid ""
"It may be the case that you want to contribute to an existing package, or "
"create a new package that will gradually be curated to be in the main "
"`contrib` directory. User codes are generally put in a separate subdirectory "
"of ATS contrib. For instance, there is a user directory `contrib/libats-/"
"bbarker/OpenMP` for OpenMP, and a curated version of OpenMP in `contrib/"
"OpenMP`."
msgstr ""

#. type: Plain text
#: Contrib.md:25
msgid ""
"In order to switch between using these various packages, [[atspkgreloc|"
"atspkgreloc]] is a useful tool that may automate the process. It can "
"additionally be used with other repositories or forms of code storage."
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:2
msgid "## Overview of the stack and heap ##"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:4
msgid ""
"This page lists common types found in ATS according to whether they are "
"allocated on the stack or heap, or both. Data that is heap allocated can be "
"disposed of using linear types and associated memory allocation and "
"deallocation functions (e.g. malloc and free), or by using a garbage "
"collector (GC). The popular [Boehm GC](http://www.hpl.hp.com/personal/"
"Hans_Boehm/gc/) is known to be supported in ATS2."
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:6
msgid ""
"The following types are allocated on the stack when used in val or var "
"assignments: types associated with ground sorts (int, bool, char, and addr). "
"Any type with sort `t@ype` (e.g. integers) or type (e.g. addresses)."
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:8
msgid ""
"The following types are allocated on the heap: boxed tuples, viewtypes, "
"datatypes, dataviewtypes, exceptions (they are a dataytpe), lazy types, c-"
"types accessed by pointer, and ref types. [[Strings|Strings]] usually fall "
"under this classification, for instance, they are usually represented as "
"abstypes and/or viewtypes for heap-allocated C strings. Note that a viewtype "
"can be used for stack-allocated variables as well , though this seems to be "
"less common, outside of its [use with var](http://www.ats-lang.org/DOCUMENT/"
"INTPROGINATS/HTML/x3352.html). It is usually the case that heap-allocated "
"types are only amenable to use with the GC or to linear types, not both. For "
"instance, datatypes are for use with a GC, whereas dataviewtypes are linear "
"types managed by the programmer."
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:11
msgid "## Using the GC ##"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:13
msgid ""
"The flag -DATS_MEMALLOC_GCBDW is passed to gcc to support the use of libgc "
"(Bohem GC) for handling memory allocation/deallocation. See this [small "
"project](https://github.com/githwxi/ATS-Postiats/tree/master/doc/PROJECT/"
"SMALL/calculator) for an example Makefile [\\[1\\]][1]. If using gcc "
"directly on ATS-generated C files for the purpose of portable code, use the -"
"lgc."
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:15
msgid "## Linear Malloc and Free Functions ##"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:17
msgid "#### Built-in ATS (de)allocation functions ####"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:19
msgid ""
"Unlike in C/C++, malloc in ATS does not return null if enough memory is not "
"available, but aborts instead [\\[2\\]][2]."
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:21
msgid "#### Custom memory (de)allocation functions ####"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:23
msgid ""
"Here is an example showing a simple way to use user-defined malloc/free "
"[\\[3\\]][3]:"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:25
msgid ""
"https://github.com/githwxi/ATS-Postiats/tree/master/doc/EXAMPLE/CA-HSR2/"
"program-1-2"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:28
msgid ""
"The flag -DATS_MEMALLOC_USER indicates to the ATS compiler that the "
"following two functions are used for memory allocation/deallocation (for "
"more details on interoperability between C and ATS, see this [chapter on "
"interaction with C](http://www.ats-lang.org/DOCUMENT/INT2PROGINATS/HTML/"
"c1960.html)):"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:33
msgid "```C extern void *atsruntime_malloc_user (size_t bsz) ;"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:37
msgid "extern void atsruntime_mfree_user (void* ptr) ; ````"
msgstr ""

#. type: Plain text
#: Stack-and-heap-allocation.md:40
msgid ""
"[1]: https://groups.google.com/d/msg/ats-lang-users/SL7fb01wsnk/vU3d9pv-RTkJ "
"[2]: https://groups.google.com/d/msg/ats-lang-users/eAMszM15vIE/MYi3Rfxe48QJ "
"[3]: https://groups.google.com/d/msg/ats-lang-users/uRQami8woQQ/l44QkqGq-IoJ"
msgstr ""

#. type: Plain text
#: Design-patterns.md:3
msgid ""
"ATS has some design patterns that are less common in the other languages.  "
"This page explains the patterns."
msgstr ""

#. type: Plain text
#: Design-patterns.md:5
msgid "## Takeout-Addback pattern"
msgstr ""

#. type: Plain text
#: Design-patterns.md:8
msgid ""
"Static meaning with ATS's type isn't good at everything.  Sequence of the "
"static meaning is divided by event driven architecture or thread."
msgstr ""

#. type: Plain text
#: Design-patterns.md:13
msgid ""
"In such case, we should use some protocol like a session.  The session is "
"opened calling takeout static function.  After takeout and before addback, "
"we can touch and use static meaning associated with the session.  It's "
"closed calling addback static funcion."
msgstr ""

#. type: Plain text
#: Design-patterns.md:15
msgid "The arrayptr library in prelude is a good example."
msgstr ""

#. type: Plain text
#: Design-patterns.md:24
#, no-wrap
msgid ""
"```ocaml\n"
"(* File: prelude/SATS/arrayptr.sats *)\n"
"praxi\n"
"arrayptr_takeout\n"
"  {a:vt0p}{l:addr}{n:int}\n"
"(\n"
"  A: !arrayptr (INV(a), l, n) >> arrayptrout (a?, l, n)\n"
") : array_v (a, l, n) // end of [arrayptr_takeout]\n"
msgstr ""

#. type: Plain text
#: Design-patterns.md:32
#, no-wrap
msgid ""
"praxi\n"
"arrayptr_addback\n"
"  {a:vt0p}{l:addr}{n:int}\n"
"(\n"
"  pf: array_v (INV(a), l, n) | A: !arrayptrout (a?, l, n) >> arrayptr (a, l, n)\n"
") : void // end of [arrayptr_addback]\n"
"```\n"
msgstr ""

#. type: Plain text
#: Design-patterns.md:36
msgid ""
"The arrayptr has no static meaning, because it's simple pointer.  The "
"array_v has static meaning, because it's dataview.  We can use array_v "
"between takeout and addback."
msgstr ""

#. type: Plain text
#: Design-patterns.md:39
msgid ""
"For more detail, see [ATSLIB/prelude/arrayptr library](http://www.ats-lang."
"org/LIBRARY/prelude/SATS/DOCUGEN/HTML/arrayptr.html#arrayptr_takeout)."
msgstr ""

#. type: Plain text
#: Design-patterns.md:41
msgid "## Localized-Template pattern"
msgstr ""

#. type: Plain text
#: Design-patterns.md:45
msgid ""
"Many functional languages use closure to inject localized processing into a "
"function.  ATS also can use closure. However it's sometimes bad idea, "
"because closure is a resource and should be maintained by linear type or GC."
msgstr ""

#. type: Plain text
#: Design-patterns.md:53
msgid ""
"ATS code can use locallized template for the situation.  In following code, "
"\"plus1\" is defined as default function template implementation on global "
"name space, and \"call_plus1\" is also defined as function templete.  Simply "
"calling \"call_plus1\" produces that \"plus1\" as default implementation is "
"called.  On the other hand, calling \"call_plus1\" binding \"plus1\" with "
"local implementation produces that the \"plus1\" is called."
msgstr ""

#. type: Plain text
#: Design-patterns.md:57
msgid ""
"```ocaml (* File: test_template.dats *)  #include \"share/atspre_staload.hats"
"\""
msgstr ""

#. type: Plain text
#: Design-patterns.md:60
msgid "extern fun{} plus1: () -> int extern fun{} call_plus1: () -> int"
msgstr ""

#. type: Plain text
#: Design-patterns.md:63
#, no-wrap
msgid ""
"implement{} plus1 () = 0 + 1                (* default implementation *)\n"
"implement{} call_plus1 () = plus1 ()\n"
msgstr ""

#. type: Plain text
#: Design-patterns.md:71
#, no-wrap
msgid ""
"implement main0 () = {\n"
"  val () = println! (call_plus1 ())         (* => 1 *)\n"
"  val v = 10\n"
"  val () = let implement{} plus1 () = v + 1 (* local implementation *)\n"
"           in println! (call_plus1 ()) end  (* => 11 *)\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: Design-patterns.md:73
msgid "The above code can be compiled with the following command."
msgstr "上記のコードは以下のコマンドでコンパイルできます。"

#. type: Plain text
#: Design-patterns.md:80
msgid ""
"``` $ patscc -o test_template test_template.dats $ ./test_template 1 11 ```"
msgstr ""

#. type: Plain text
#: Design-patterns.md:83
msgid ""
"Note \"call_plus1\" should be defined as templete, if you would like to "
"localize the child function using template."
msgstr ""

#. type: Plain text
#: Design-patterns.md:85
msgid ""
"For more detail, see [ATSLIB/prelude/strptr library](http://www.ats-lang.org/"
"LIBRARY/prelude/SATS/DOCUGEN/HTML/strptr.html#strnptr_foreach)."
msgstr ""

#. type: Plain text
#: languages.md:3
msgid ""
"The wiki is also available in: * [Japanese](https://github.com/jats-ug/ATS-"
"Postiats-wiki)"
msgstr ""

#. type: Plain text
#: languages.md:4
msgid ""
"For information on translating the wiki or related content, see "
"[[internationalization|internationalization]]."
msgstr ""

#. type: Plain text
#: Rosetta-Stone.md:1
msgid ""
"This is meant to be a listing of common functions and types that can be "
"quickly used and are analogous to other popular programming languages (e.g. "
"C)."
msgstr ""

#. type: Plain text
#: effects.md:2
msgid ""
"Functions can have various effects that may be tracked by the typechecker "
"[\\[1\\]][1].  These are described immediately after the : in the function "
"definition (note that there should be no space between the ':' and the '<>'. "
"As well as :<> meaning pure and : (no '<>') meaning any effects may occur, "
"there are various other things that can appear between the '<>' symbols."
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`!exn` - the function possibly raises exceptions"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`!ntm` - the function possibly is non-terminating"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`!ref` - the function possibly updates shared memory"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`0` - the function is pure (has no effects)"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`1` - the function can have all effects"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`fun` - the function is an ordinary, non-closure, function"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`clo` - the function is a stack allocated closure"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid ""
"`cloptr` - the function is a linear closure that must be explicitly freed"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid ""
"`cloref` - the function is a peristent closure that requires the garbage "
"collector to be freed."
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`lin` - the function i slinear and can be called only once"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid "`prf` - the function is a proof function"
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid ""
"`!wrt` - indicates that a function may write to a location it owns. For "
"instance, ptr_set incurs such an effect."
msgstr ""

#. type: Bullet: '* '
#: effects.md:16
msgid ""
"`!ref` - can read from or write to a location that one knows exists but does "
"not own."
msgstr ""

#. type: Plain text
#: effects.md:18
msgid ""
"These can be combined, eg. <lincloptr1>. Function effects are all of [[sort|"
"sort]] `eff`."
msgstr ""

#. type: Plain text
#: effects.md:19
msgid ""
"[1]: https://groups.google.com/forum/#!searchin/ats-lang-users/function"
"$20effects/ats-lang-users/88CYxwKl0M0/GAvDQQKkzJ8J"
msgstr ""

#. type: Plain text
#: Home.md:2
msgid "Welcome to the wiki for ATS2."
msgstr "ようこそ ATS2 wiki へ!"

#. type: Plain text
#: Home.md:4
msgid "The most recent released version of ATS2 is ATS2-0.1.1."
msgstr "ATS2 の最新リリース版は ATS2-0.1.1 です。"

#. type: Plain text
#: Home.md:6
msgid ""
"The programming language ATS is a statically typed language with a type "
"system rooted in the framework Applied Type System. ATS unifies "
"specification and implementation by accommodating a programmer-centric "
"approach to program verification: How do we know a program being implemented "
"correctly? We ask the programmer to demonstrate it with a proof."
msgstr ""
"プログラミング言語 ATS は Applied Type System に基づいた型システムを持つ静的"
"型付けプログラミング言語です。ATS は形式的な仕様と実装で統一されていて、プロ"
"グラムの検証にプログラマ中心のアプローチを提供します: どうやってプログラムが"
"正しく実装されているか知ることができるでしょうか？私達は証明を使って立証する"
"ことをプログラマに要請しています。"

#. type: Plain text
#: Home.md:8
msgid ""
"ATS also has another [website][1] (built using ATS itself). For a thorough "
"introduction to ATS, see the book *[Introduction to Programming in ATS][2]*."
msgstr ""
"ATS にはまた別の [Web サイト][1] があります。(このサイトは ATS 自身を使って構"
"築されています。) ATS の詳細な入門記事は *[Introduction to Programming in "
"ATS][2]* から読むことができます。"

#. type: Plain text
#: Home.md:10
msgid "This wiki contains the following pages."
msgstr "この wiki には次のようなページがあります。"

#. type: Plain text
#: Home.md:21
msgid ""
"- [[Frequently asked questions|Frequently asked questions]].  - [[Building "
"and installing|Building and installing]].  - ATS code style: [[style guide|"
"Style guide]], detecting and avoiding [[memory leaks|Memory leaks]], [[code "
"optimization|Code optimization]], [[design patterns|Design patterns]].  - "
"Language reference: [[built-in operators|Built-in operators]], [[dependent "
"types|Dependent types]], [[linear types|Linear types]], [[error messages|"
"Error messages]], [[features|features]].  - Library reference: [[ATSLIB|"
"ATSLIB]], [[contrib|contrib]], [[built-in datatypes|Built-in datatypes]], "
"[[built-in functions|Built-in functions]], [[input and output|Input and "
"output]], [[scientific computing|Scientific Computing]], and [[contributed "
"libraries|Contributed Libraries]].  - Extensions: [[writing interfaces to C "
"libraries|Writing interfaces to C libraries]], [[ATS/LF|ATSLF]] (theorem "
"proving).  - ATS internals: [[built-in constraint solving|Built-in "
"constraint solving]], [[stack and heap allocation|Stack and heap "
"allocation]], [[internal types|Internal types]].  - Information on specific "
"[[keywords|keywords]] and terminology in ATS: [[char|char]], [[dataviewtype|"
"dataviewtype]], [[overload|overload]], [[sort|sort]], [[type|type]].  - Wiki "
"[[TODO|TODO]]: A list of wiki pages that need the most help.  - Other "
"[[languages|languages]]."
msgstr ""
"- [よくある質問](Frequently-asked-questions.md)\n"
"- [ビルドとインストール](Building-and-installing.md)\n"
"- ATS のコードスタイル: [スタイルガイド](Style-guide.md), [メモリリーク]"
"(Memory-leaks.md) の検出と回避, [コードの最適化](Code-optimization.md), [デザ"
"インパターン](Design-patterns.md)\n"
"- 言語リファレンス: [ビルトイン演算子](Built-in-operators.md), [依存型]"
"(Dependent-types.md), [線形型](Linear-types.md), [エラーメッセージ](Error-"
"messages.md), [機能](features.md)\n"
"- ライブラリリファレンス: [atslib](atslib.md), [contrib](contrib.md), [ビルト"
"インデータ型](Built-in-datatypes.md), [ビルトイン関数](Built-in-functions."
"md), [入出力](Input-and-output.md), [科学計算](Scientific-Computing.md), [寄"
"贈されたライブラリ](Contributed-Libraries.md)\n"
"- 拡張: [Cライブラリへのインターフェイスを書くには|Writing-interfaces-to-C-"
"libraries.md], [ATS/LF](ATS-LF.md) (定理証明)\n"
"- ATS の内部実装: [ビルトインの強制解決](Built-in-constraint-solving.md), [ス"
"タックとヒープへのメモリ確保](Stack-and-heap-allocation.md), [内部の型]"
"(Internal-types.md)\n"
"- ATS における特殊なキーワードについて: [char](char.md), [dataviewtype]"
"(dataviewtype.md), [overload](overload.md), [sort](sort.md), [type](type."
"md)\n"
"- Wiki [TODO](TODO.md): 助けが必要な wiki ページのリスト\n"
"- 他の [言語](languages.md) で読むには"

#. type: Plain text
#: Home.md:23
msgid ""
"For the first version of ATS, there is a largely unmaintained [wiki][3]."
msgstr ""
"旧バージョンの ATS については、ほとんどメンテナンスされていない [wiki][3] が"
"あります。"

#. type: Plain text
#: Home.md:25
msgid ""
"ATS2 is distributed under the GNU General Public License version 3 (GPLv3), "
"or any later version."
msgstr ""
"ATS2 は、GNU General Public License version 3 (GPLv3)、またはこれ以降のバー"
"ジョンで配布されています。"

#. type: Plain text
#: Home.md:28
msgid ""
"[1]: http://www.ats-lang.org/ [2]: http://www.ats-lang.org/DOCUMENT/"
"INT2PROGINATS/HTML/book1.html [3]: https://sourceforge.net/p/ats-lang/wiki/"
"Home/"
msgstr ""
"[1]: http://www.ats-lang.org/\n"
"[2]: http://www.ats-lang.org/DOCUMENT/INT2PROGINATS/HTML/book1.html\n"
"[3]: https://sourceforge.net/p/ats-lang/wiki/Home/"

#. type: Plain text
#: code-generation.md:2
msgid ""
"While the usual way to interact with other languages is to interact through "
"C interfaces in both ATS and the other language, in some cases it may be "
"desirable to directly compile ATS to another language."
msgstr ""

#. type: Plain text
#: code-generation.md:7
msgid ""
"Currently, this is possible for the following languages: * C (The default; "
"several compilers are known to work, including GCC, LLVM/Clang, and "
"TinyCC.)  * Javascript (Compilation is supported by the emscripten compiler "
"which compiles C code to javascript [\\[1\\]][1].)  * [Python](https://"
"github.com/githwxi/ATS-Postiats-contrib/tree/master/projects/MEDIUM/ATS-"
"parse-emit/Python)"
msgstr ""

#. type: Plain text
#: code-generation.md:9
msgid "### Introduction"
msgstr ""

#. type: Plain text
#: code-generation.md:11
msgid ""
"ATS2 compiler targets a subset of C programming language. There is a library/"
"utility ATS-parse-emit (see above for a link) that parses ATS2 compiler "
"output and transforms it into executable code in other programming languages "
"(e.g., currently, Python)."
msgstr ""

#. type: Plain text
#: code-generation.md:13
msgid ""
"The subset is comprised by the following kinds of syntax (see atsparemit."
"sats):"
msgstr ""

#. type: Bullet: '* '
#: code-generation.md:18
msgid "s0exp (static expressions, for types)"
msgstr ""

#. type: Bullet: '* '
#: code-generation.md:18
msgid ""
"d0exp (dynamic expressions, i.e. expressions that get executed at run-time "
"to yield values, but not involving any control flow)"
msgstr ""

#. type: Bullet: '* '
#: code-generation.md:18
msgid ""
"instr (low-level instruction nodes, e.g. if-then-else, return, jump, "
"assignment)"
msgstr ""

#. type: Bullet: '* '
#: code-generation.md:18
msgid ""
"d0ecl (declarations of types, macros, external functions, and functions "
"compiled from ATS2 source code)"
msgstr ""

#. type: Plain text
#: code-generation.md:20
msgid ""
"A function declaration (f0decl) consists of function kind (external/static), "
"heading (i.e. signature, that is, list of (named) arguments and return type) "
"and optional body (list of local variable definitions and list of "
"instructions). Moreover, in accordance with C rules, every function is "
"emitted twice: firstly, as a forward-declaration (contains no body, "
"arguments might be unnamed), and secondly, as a definition (in this case, "
"body is present)."
msgstr ""

#. type: Plain text
#: code-generation.md:22
msgid "### Language translating functions"
msgstr ""

#. type: Plain text
#: code-generation.md:24
msgid "For more complete documentation, please see:"
msgstr ""

#. type: Plain text
#: code-generation.md:26
msgid "https://github.com/hsk/docs/blob/master/ats/compiled_c_macro.md"
msgstr ""

#. type: Bullet: '* '
#: code-generation.md:36
msgid "`ATSINSlab/ATSINSgoto` are used for pattern matching compilation."
msgstr ""

#. type: Bullet: '* '
#: code-generation.md:36
msgid "`ATSINSflab/ATSINSfgoto` are used to support tail-call optimization."
msgstr ""

#. type: Plain text
#: code-generation.md:36
#, no-wrap
msgid ""
"* `ATSmove_boxrec(tmp, T)` creates an uninitialized record of the type T, and\n"
"assign it to tmp.\n"
"* `ATSmove_boxrec` is always followed by a few assignments for field initialization;\n"
"they should probably grouped together and then translated into something like:\n"
"```python\n"
"tmp = (v1, v2, ..., vn) # (python)\n"
"```\n"
msgstr ""

#. type: Plain text
#: code-generation.md:40
msgid ""
"### Python For compiling code to Python, there is currently no plan to "
"handle pointer operations.  Or one may go the Cython road."
msgstr ""

#. type: Plain text
#: code-generation.md:43
msgid ""
"Because Python does not support jumps, ATSINSgoto and ATSINSfgoto need to be "
"removed. I will try to do it."
msgstr ""

#. type: Plain text
#: code-generation.md:46
msgid ""
"[1]: https://groups.google.com/d/msg/ats-lang-users/WVje4zG4bKA/p-XulrfBFwIJ"
msgstr ""

#. type: Plain text
#: kernels.md:3
msgid ""
"## Operating system kernels using ATS * [Terrier](https://github.com/mrd/"
"terrier) is an ARM-based operating system and a fork of [Puppy](http://"
"github.com/mrd/puppy). It is nearly 9% ATS and 84% C."
msgstr ""
"## ATS を用いた OS の kernel\n"
"* [Terrier](https://github.com/mrd/terrier) は ARM アーキティクチャの OS で "
"[Puppy](http://github.com/mrd/puppy) のフォークです。その 9% は ATS、84% は C"
"言語で設計されています。"

#. type: Plain text
#: kernels.md:5
msgid ""
"## Kernel development resources * Some kernel development tutorials are "
"available in [[contrib|contrib]] in the [KernelBuilding](https://github.com/"
"githwxi/ATS-Postiats-contrib/tree/master/projects/MEDIUM/KernelBuilding) "
"directory. In particular there is a tutorial based on the [singpolyma-kernel]"
"(https://singpolyma.net/category/singpolyma-kernel/) kernel programming "
"tutorial, originally written in C by [Stephen Paul Weber](https://singpolyma."
"net/). For additional discussion see [here](https://groups.google.com/d/msg/"
"ats-lang-users/Df1CBVD5dXA/jUFem797W6AJ)."
msgstr ""
"## kernel 開発に関する情報\n"
"* いくつかの kernel 開発チュートリアルが [contrib](Contrib.md) の "
"[KernelBuilding](https://github.com/githwxi/ATS-Postiats-contrib/tree/master/"
"projects/MEDIUM/KernelBuilding) ディレクトリにあります。特に、元はC言語で "
"[Stephen Paul Weber](https://singpolyma.net/) によって書かれた [singpolyma-"
"kernel](https://singpolyma.net/category/singpolyma-kernel/) kernel プログラミ"
"ングチュートリアルをベースにしたチュートリアルがあります。さらなる議論につい"
"ては [ここ](https://groups.google.com/d/msg/ats-lang-users/Df1CBVD5dXA/"
"jUFem797W6AJ) を参照してください。"

#. type: Bullet: '* '
#: keywords.md:4
msgid ""
"`castfn` - a function (`fn`) that changes the type, both dynamically and "
"statically, of its argument. The converted value is returned. When only a "
"static `castfn` is needed, one can use the `cast` and related functions in "
"`unsafe.sats` to save time (a common use is converting a pointer from C to "
"some other viewtype)."
msgstr ""

#. type: Bullet: '* '
#: keywords.md:4
msgid ""
"`fn` - non-recursive function (`fun`). Used in place of `fun` for "
"optimization purposes (is this true?) and as well as to check against the "
"possibility of an accidental infinite loop."
msgstr ""

#. type: Bullet: '* '
#: keywords.md:4
msgid "`fun` - a function that can be recursive."
msgstr ""

#. type: Bullet: '* '
#: keywords.md:4
msgid ""
"`implement` - used to implement a function that has been defined using `fun` "
"or `fn`"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:4
msgid ""
"## Reading error messages Perhaps the most common error for most people new "
"to ATS will be typechecking errors.  For this reason, it is important first "
"to get comfortable with the typechecking error messages by being able to "
"read them without much difficulty. Although the error messages may appear "
"archaic at first, there is [no easy way around it](https://groups.google.com/"
"d/msg/ats-lang-users/-zsdyZWglRs/SUZt89SjYNcJ), and some experience will "
"make reading the error messages a matter of course."
msgstr ""

#. type: Plain text
#: typechecking-errors.md:6
msgid "For instance, the following line of code"
msgstr "例えば、次のコードの行は..."

#. type: Plain text
#: typechecking-errors.md:10
msgid "```ocaml val () = assertloc (sum = showtype(1+2+3+4+5.0))  ```"
msgstr ""
"```ocaml\n"
"val () = assertloc (sum = showtype(1+2+3+4+5.0))\n"
"```"

#. type: Plain text
#: typechecking-errors.md:12
msgid "generates the following messages:"
msgstr "次のようなメッセージを引き起します:"

#. type: Plain text
#: typechecking-errors.md:18
msgid ""
"``` /tmp/abcde.dats: 357(line=27, offs=10) -- 394(line=27, offs=47): "
"error(3): the symbol [=] cannot be resolved as no match is found.  /tmp/"
"abcde.dats: 357(line=27, offs=10) -- 394(line=27, offs=47): error(3): [/home/"
"hwxi/research/Postiats/git/src/pats_trans3_util.dats]: d3exp_trdn: the "
"dynamic expression cannot be assigned the type "
"[S2Eapp(S2Ecst(bool_bool_t0ype); S2EVar(10))].  /tmp/abcde.dats: "
"357(line=27, offs=10) -- 394(line=27, offs=47): error(3): mismatch of static "
"terms (tyleq): ```"
msgstr ""
"```\n"
"/tmp/abcde.dats: 357(line=27, offs=10) -- 394(line=27, offs=47): error(3): "
"the symbol [=] cannot be resolved as no match is found.\n"
"/tmp/abcde.dats: 357(line=27, offs=10) -- 394(line=27, offs=47): error(3): [/"
"home/hwxi/research/Postiats/git/src/pats_trans3_util.dats]: d3exp_trdn: the "
"dynamic expression cannot be assigned the type "
"[S2Eapp(S2Ecst(bool_bool_t0ype); S2EVar(10))].\n"
"/tmp/abcde.dats: 357(line=27, offs=10) -- 394(line=27, offs=47): error(3): "
"mismatch of static terms (tyleq):\n"
"```"

#. type: Plain text
#: typechecking-errors.md:20
msgid "It means:"
msgstr ""

#. type: Bullet: '1. '
#: typechecking-errors.md:25
msgid "the overloaded operator = cannot be resolved"
msgstr ""

#. type: Bullet: '2. '
#: typechecking-errors.md:25
msgid ""
"the compiler assigns a error-type (S2Eerr) to the expression: sum = "
"showtype(1+2+3+4+5.0)"
msgstr ""

#. type: Bullet: '3. '
#: typechecking-errors.md:25
msgid ""
"S2Eapp(S2Ecst(bool_bool_t0ype); S2EVar(10)) stands for bool_bool_t0ype(...)"
msgstr ""

#. type: Bullet: '4. '
#: typechecking-errors.md:25
msgid ""
"assertloc expects a value of type bool_bool_t0ype(...), but a value of error-"
"type (S2Eerr) is provided."
msgstr ""

#. type: Plain text
#: typechecking-errors.md:31
msgid ""
"## $showtype demonstration Another immensely helpful tool is the `$showtype` "
"directive, which prints the type of a value. **When programming in ATS, one "
"is expected to be able to tell the type of *any* expression in his or her "
"code. If not, then one may get lost even if type-error messages are "
"prettified.** For example, in the following simple example:"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:35
msgid "```ocaml val x = 7 val _ = $showtype x"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:41
msgid ""
"val y = ref<int> 7 val _ = $showtype y val _ = $showtype !y ``` we might "
"think `!y` and `x` should have the same type. This can be checked by the `"
"$showtype` output when running the typechecker:"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:45
#, no-wrap
msgid ""
"    **SHOWTYPE**(/home/myhome/showtype_test.dats: 143(line=12, offs=19) -- 144(line=12, offs=20)): S2Eapp(S2Ecst(g1int_int_t0ype); S2Ecst(int_kind), S2Eintinf(7))\n"
"    **SHOWTYPE**(/home/myhome/showtype_test.dats: 183(line=15, offs=19) -- 184(line=15, offs=20)): S2Eapp(S2Ecst(ref_vt0ype_type); S2Eapp(S2Ecst(g0int_t0ype); S2Ecst(int_kind)))\n"
"    **SHOWTYPE**(/home/myhome/showtype_test.dats: 203(line=16, offs=19) -- 205(line=16, offs=21)): S2Eapp(S2Ecst(g0int_t0ype); S2Ecst(int_kind))\n"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:48
msgid "More concisely,"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:54
msgid ""
"``` type of x: S2Eapp(S2Ecst(g1int_int_t0ype); S2Ecst(int_kind), "
"S2Eintinf(7))  type of y: S2Eapp(S2Ecst(ref_vt0ype_type); "
"S2Eapp(S2Ecst(g0int_t0ype); S2Ecst(int_kind)))  type of !y: "
"S2Eapp(S2Ecst(g0int_t0ype); S2Ecst(int_kind))  ```"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:56
msgid ""
"So we can see that the assumption proved incorrect. Let's try again with a "
"new value, `z`:"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:61
msgid "```ocaml val z = ref<int(7)> 7 val _ = $showtype !z ````"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:65
msgid ""
"```` type of !z: S2Eapp(S2Ecst(g1int_int_t0ype); S2Ecst(int_kind), "
"S2Eintinf(7))  ```"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:67
msgid ""
"which shows that `!z` is now the same type as `x`. This reflects that by "
"default, integers have types parameterized by their values in ATS, as was "
"the case for `x`."
msgstr ""

#. type: Plain text
#: typechecking-errors.md:69
msgid "### See also"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:71
msgid ""
"[[Internal Types|Internal-types]], to understand the `S2Eapp`, `S2Ecst`, "
"etc, which often appears in error messages."
msgstr ""

#. type: Plain text
#: typechecking-errors.md:73 Error-messages.md:5
msgid "[1]: https://sourceforge.net/p/ats-lang/wiki/Error%20messages/"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:75
msgid "## Constraint-solver limitations"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:78
msgid ""
"### Supplying static values to the typechecker Should generate `unsolved "
"constraint: C3NSTRprop` messages."
msgstr ""

#. type: Plain text
#: typechecking-errors.md:80
msgid ""
"In some rare cases, it may be necessary to supply a static value (if a "
"singleton type will do) to the typechecker, as the constraint solver may not "
"be able to infer the constraints. For instance, here is an example below "
"where the typechecker can't solve for an integer `x` such that `2x = 2` "
"([Fourier-Motzkin elimination](https://en.wikipedia.org/wiki/Fourier"
"%E2%80%93Motzkin_elimination) is for linear inequalities, so this integer "
"equality proves to be more difficult and is currently unsupported by the "
"solver). We can get around this by suggesting that a valid value for static "
"`x` in the `DubInt` type below, when `2x = 2`, is `1`, and we supply `1` "
"explicitly:"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:85
msgid ""
"```ocaml typedef Int = [x:int] int(x)  typedef IntGT0 = [x:nat] int(x)  "
"typedef DubInt = [x:int] int(2*x)"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:88
msgid "fun fun1 (x: Int): void = ()"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:91
msgid "fun funGT0 (x: IntGT0): void = ()"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:94
msgid "fun dubx(x: DubInt): void = ()"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:98
msgid "implement main0 () = { val x1:int(1) = 1 val x2:int(2) = 2"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:102
msgid "(* These are fine *)  val () = fun1(x1)  val () = funGT0(x1)"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:106
msgid ""
"(* This would produce an unsolved constraint due to equality constraint:"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:108
msgid "val () = dubx(x2)"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:110
msgid "Instead we can do: *)"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:114
msgid "val () = dubx(#[ 1 | x2])  } ```"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:116
msgid ""
"Another case may happen when we aren't able to supply the type implicitly "
"since no constraints on the type are generated. In such a case, supplying a "
"static value will work:"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:122
#, no-wrap
msgid ""
"```ocaml\n"
"datatype\n"
"either_t0ype_bool_type\n"
"(\n"
"  a:t@ype+, b:t@ype+, bool\n"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:126
#, no-wrap
msgid ""
") =\n"
"  | Left (a, b, true) of (a)\n"
"  | Right (a, b, false) of (b)\n"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:131
msgid ""
"stadef either = either_t0ype_bool_type typedef either (a:t0p, b:t0p) = [c:"
"bool] either(a, b, c)"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:136
msgid "fn{ a,b:t0p } either_left (a:a):<> either(a, b, true) = Left(a)"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:140
msgid "fn{ a,b:t0p } either_right (b:b):<> either(a, b, false) = Right(b)"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:147
#, no-wrap
msgid ""
"fun do_either(x : int)\n"
"  : [n:nat; m:nat] either (int n, int m) =\n"
"  (* This would fail to typecheck due to unknown static values (i.e. types) \n"
"     for 'b' and 'a' in either(_,b,_) and either(a,_,_) respectively:\n"
"  if x > 0 then either_left(0) else either_right(1)                   \n"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:150
#, no-wrap
msgid ""
"  Instead we can do:                                                    *)\n"
"  if x > 0 then #[0,1 | either_left(0)] else #[0,1 | either_right(1)]\n"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:153
msgid "implement main0() = ignoret(do_either(~1))  ```"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:155
msgid "##Template-related errors##"
msgstr ""

#. type: Plain text
#: typechecking-errors.md:158
msgid "- The template is expected to be fully applied but it is not."
msgstr ""

#. type: Plain text
#: typechecking-errors.md:159
msgid ""
"This error will pop up from leaving out a template argument in some form, "
"and it is often the case (especially for beginners), that they've put the a "
"template argument on the wrong side of the function name."
msgstr ""

#. type: Bullet: '* '
#: Contributed-Libraries.md:2
msgid ""
"[ATS Resources](http://www.ats-lang.org/RESOURCE/).  Not strictly libraries, "
"but useful for many projects."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:5
msgid ""
"+ [ATSfloat](http://scg.ece.ucsb.edu/ats.html).  ATSfloat is a layer written "
"on top of the ATS CBLAS and LAPACK interfaces. The primary function of "
"ATSfloat is to provide convenient and uniform ATS style access to BLAS and "
"LAPACK routines. However, I also intend to interface to other numerical "
"libraries that I need. For example, currently ATSfloat already has a partial "
"interface to libsndfile. Furthermore, ATSfloat will also contain the codes "
"for the fast algorithms that we are developing for HSS and FMM matrices, and "
"also implementations of GMSN methods for approximation, solution of "
"differential equations and signal and image processing problems."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:8
msgid ""
"+ [ATS/OpenGL] Examples on using OpenGL from ATS can be found in the contrib "
"subdirectory in the ATS source."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:11
msgid ""
"+ [ATS/Cairo](http://www.ats-lang.org/DOCUMENT/ATSCAIRO/HTML/book1.html) "
"Information on using the 2d graphics library Cairo from ATS. Also see the "
"contrib subdirectory in the ATS source."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:14
msgid ""
"+ [ATS/GTK] Examples on using GTK from ATS can be found in the contrib "
"subdirectory in the ATS source."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:17
msgid ""
"+ [ATS/pango] Examples on using pango from ATS can be found in the contrib "
"subdirectory in the ATS source."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:20
msgid ""
"+ [ATS/glib] Examples on using glib from ATS can be found in the contrib "
"subdirectory in the ATS source."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:23
msgid ""
"+ [ATS/X11] Examples on using X11 from ATS can be found in the contrib "
"subdirectory in the ATS source."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:26
msgid ""
"+ [ATS/MySQL] Examples on using MySQL from ATS can be found in the contrib "
"subdirectory in the ATS source."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:28
msgid ""
"+ [ATS CMake](https://ats-cmake-documentaition.readthedocs.org/en/latest/) "
"Modern build tool for projects involving ATS and other languages."
msgstr ""

#. type: Plain text
#: Contributed-Libraries.md:29
msgid ""
"+ [Linux Epoll interface](https://ezcrypt.it/rZ5n#MhHrh9mRydNuomSwXhP8XS6N)"
msgstr ""

#. type: Plain text
#: FAQ.md:1
msgid "see [[Frequently asked questions|Frequently asked questions]]"
msgstr ""

#. type: Plain text
#: OS-kernels.md:1
msgid "See [[kernels|kernels]]."
msgstr ""

#. type: Plain text
#: Memory-leaks.md:2
msgid ""
"The design of ATS helps the programmer to create code without memory leaks. "
"Still, there are a few ways to create leaky code."
msgstr ""

#. type: Bullet: '  1. '
#: Memory-leaks.md:5
msgid "Using unsafe features in ATS"
msgstr ""

#. type: Bullet: '  2. '
#: Memory-leaks.md:5
msgid "Using C code or other non-ATS code that is not memory-safe"
msgstr ""

#. type: Plain text
#: Memory-leaks.md:7
msgid "Here are some strategies for creating memory-safe code in ATS."
msgstr ""

#. type: Plain text
#: Memory-leaks.md:8
msgid "> Fill me in!"
msgstr ""

#. type: Plain text
#: dataviewtype.md:2
msgid ""
"Dataviewtypes are linear analogues of datatypes. As such, their memory must "
"be managed explicitly, which typically entails creating a free function for "
"each dataviewtype introduced. Due to potential complexity in type checking "
"and proofs (as well as it being a concrete type) it is advised to make use "
"of an [[absviewtype|absviewtype]] provide an interface for dataviewtypes."
msgstr ""

#. type: Plain text
#: dataviewtype.md:5
msgid ""
"## Folding An important notion in dealing with dataviewtypes is being able "
"to access the arguments of constructors. The implications differ if we want "
"to use the arguments as l-values or just as r-values. For instance, take the "
"following example:"
msgstr ""

#. type: Plain text
#: dataviewtype.md:10
#, no-wrap
msgid ""
"```ocaml\n"
"datavtype dvt =\n"
"  | dvt0 of ()\n"
"  | dvt2 of (dvt,dvt)\n"
msgstr ""

#. type: Plain text
#: dataviewtype.md:17
#, no-wrap
msgid ""
"fun foo (x: !dvt): void =\n"
"  case+ x of\n"
"  | dvt0 () => ()\n"
"  | dvt2 (x1, x2) => ()        // x1 and x2 are values\n"
"  | @dvt2 (x1, x2) => fold@(x) // x1 and x2 are l-values\n"
"```\n"
msgstr ""

#. type: Plain text
#: dataviewtype.md:22
msgid ""
"Basically, you need to put @ in front of a linear constructor if you want to "
"use the arguments of the constructor as l-values. Why l-values? Because an l-"
"value allows its content to be modified. Note that explicit folding (fold@)  "
"is needed if @ is used."
msgstr ""

#. type: Plain text
#: dataviewtype.md:24
msgid "### A more complex example ###"
msgstr ""

#. type: Plain text
#: dataviewtype.md:27
msgid ""
"This example is primarily used to build on the above while introducing a "
"higher degree of nesting, and is based on an example from the ATS1 wiki "
"(warning, [external link](https://sourceforge.net/p/ats-lang/wiki/"
"dataviewtype/)). Also note that this example doesn't explicitly mention the "
"difference between the l-values and r-values in the comments, since the "
"difference wasn't accessible in ATS1:"
msgstr ""

#. type: Plain text
#: dataviewtype.md:60
#, no-wrap
msgid ""
"```ocaml\n"
"dataviewtype dvt =\n"
"    | dvt_0 of ()\n"
"    | dvt_1 of (dvt)\n"
"    | dvt_2 of (dvt,dvt)\n"
"(*\n"
"                                                       (a)ccessible/usable\n"
"                                                       (u)nfolded\n"
"                                                       (f)olded\n"
"                                                       (n)o view available\n"
"                                                       (-) not in scope\n"
"                                                          d0   d1   d11  d12 d121\n"
"                                                          ----------------------- *)\n"
"fun use_dvt(d0: !dvt):void = case+ d0 of               (* a    -    -    -   -    *)\n"
"  | @dvt_1 (d1 as dvt_2(d11,d12) ) => let              (* u    a    a    a   -    *)\n"
"    val () = case+ (d11,d12) of                        (*                         *)\n"
"      | (@dvt_0 (), @dvt_1 (d121) ) => let             (* u    a    u    u   a    *)\n"
"        prval () = fold@ d11 and () = fold@ d12        (* u    a    af   af  n    *)\n"
"        in () end                                      \n"
"      | (_,_) => ()                                    \n"
"    prval () = fold@ d0                                (* af   n    n    n   -    *)\n"
"    in () end                                          (* d0   d1   d2  d11  d12  *)\n"
"                                                       (*------------------------ *)\n"
"  | @dvt_2 (d1,d2) =>                                  (* u    a    a             *)\n"
"    (case+ d1 of                                       (*                         *)\n"
"      | @dvt_2 (d11,d12) => let                        (* u    u    a   a    a    *)\n"
"        prval () = fold@ d1                            (* u    af   a   n    n    *)\n"
"        prval () = fold@ d0                            (* af   n    n   n    n    *)\n"
"        in () end\n"
"      | _ => fold@ d0\n"
"    )\n"
"  | _ =>  ()\n"
"```\n"
msgstr ""

#. type: Plain text
#: runtime-errors.md:2
msgid ""
"Runtime errors are unusual in ATS, particularly segmentation faults, but "
"there are a few common reasons for this. Also see the [[memory leaks|Memory "
"leaks]] article."
msgstr ""
"ATS では実行時エラー、特にセグメンテーションフォールトが起きるのは稀です。そ"
"れでもそのようなエラーが起きることがあります。また [メモリリーク](Memory-"
"leaks.md) の記事も参照してください。"

#. type: Plain text
#: runtime-errors.md:5
msgid ""
"## Unexpected behavior from a C compiler Compiler optimization issues crop "
"up from time to time, as every compiler is different for some cases."
msgstr ""
"## C言語コンパイラの意図しない挙動\n"
"\n"
"コンパイラ毎にいくらか異なるために、コンパイラ最適化は時々実行時エラーを引き"
"起こします。"

#. type: Plain text
#: runtime-errors.md:8
msgid ""
"### GCC * GCC 4.8: possible loop optimization issues: may need `--fno-"
"aggressive-loop-optimization`"
msgstr ""
"### GCC\n"
"\n"
"* GCC 4.8: ループ最適化による問題: `--fno-aggressive-loop-optimization` が必"
"要かもしれません"

#. type: Plain text
#: runtime-errors.md:11
msgid "## Segmentation faults"
msgstr "## セグメンテーションフォールト"

#. type: Plain text
#: runtime-errors.md:13
msgid ""
"These are generally pretty rare, and can occur because of an unintended "
"infinite recursion; these are generally easy to find. For more information, "
"see the [[loops|loops]] article. These can generally be avoid by using "
"[[termination metrics|termination metrics]], or if no termination proof is "
"to be provided, the compiler can generate run‑time termination checks, if it "
"is passed this command‑line option: `-D_ATS_TERMINATION_CHECK`."
msgstr ""
"めったにないことですが、意図しない無限再帰が起きることがあります; これを見つ"
"けるのは一般に簡単です。詳細は [ループ](loops.md) の記事を読んでください。一"
"般に、これらは [停止性メトリクス](termination-metrics.md) を使用することで回"
"避できます。また、もし停止性の証明を与えない場合には、コマンドラインオプショ"
"ン `-D_ATS_TERMINATION_CHECK` を渡すことで、コンパイラは実行時の停止性検査を"
"生成するようになります。"

#. type: Plain text
#: runtime-errors.md:14
msgid ""
"If you are doing something unsafe with memory, though, particularly when "
"interfacing with other C code, there are other possibilities. For more "
"information, see [[memory leaks|Memory leaks]]."
msgstr ""
"もし安全でないメモリアクセスを行なっていたり、C言語コードと連動している場合に"
"は、また別の可能性があります。詳細は [メモリリーク](Memory-leaks.md) を参照し"
"てください。"

#. type: Plain text
#: staload.md:3
msgid ""
"Note that staload in ATS is a bit like `#include` in C. However, `staload` "
"and `#include` are implemented totally differently."
msgstr ""

#. type: Plain text
#: staload.md:6
msgid ""
"By staloading a file 'foo.sats' as follows, a namespace is created for 'foo."
"sats':"
msgstr ""

#. type: Plain text
#: staload.md:10
msgid "```ocaml staload FOO = \"foo.sats\" ```"
msgstr ""

#. type: Plain text
#: staload.md:12
msgid "A name xyz declared in 'foo.sats' should be referred to as $FOO.xyz."
msgstr ""

#. type: Plain text
#: staload.md:14
msgid "If we next do:"
msgstr ""

#. type: Plain text
#: staload.md:19
msgid ""
"```ocaml staload FOO2 = \"foo.sats\" ``` then there is no actual loading "
"except FOO2 becomes an alias of FOO."
msgstr ""

#. type: Plain text
#: staload.md:21
msgid "We can also do"
msgstr ""

#. type: Plain text
#: staload.md:25
msgid "```ocaml staload \"foo.sats\" ```"
msgstr ""

#. type: Plain text
#: staload.md:28
msgid ""
"which opens up the namespace for 'foo.sats' so that names declared in 'foo."
"sats' can be referred to directly."
msgstr ""

#. type: Plain text
#: staload.md:31
msgid ""
"There is also support for `#include` in ATS, which simply pastes any file to "
"be included at the point where `#include` is located."
msgstr ""

#. type: Plain text
#: staload.md:36
msgid ""
"Another use of staload is to make template implementations available to the "
"ATS compiler. For instance, the following line makes the template "
"implementations in foo.dats available for the purpose of code generation "
"(from ATS source to C target):"
msgstr ""

#. type: Plain text
#: staload.md:42
msgid ""
"```ocaml staload _ = \"foo.dats\" ``` The use of '_' is to make sure that "
"nothing declared in 'foo.dats' gets spilled out accidentally [\\[1\\]][1]."
msgstr ""

#. type: Plain text
#: staload.md:44
msgid "Additional references: [\\[2\\]][2]"
msgstr ""

#. type: Plain text
#: staload.md:46
msgid ""
"[1]: https://groups.google.com/forum/#!searchin/ats-lang-users/%22staload$20_"
"%22/ats-lang-users/qO7XsiR8xA8/E0tufu9pJVkJ [2]: https://groups.google.com/d/"
"msg/ats-lang-users/4_d_tmGZXIA/8Hc7kMLfsesJ"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:2
msgid "## ATS2"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:4
msgid "### ATS/Postiats"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:6
msgid ""
"The name for the current compiler of ATS2, the successor of ATS (or ATS1)."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:8
msgid ""
"The actual implementation of ATS/Postiats started in the March of 2011, and "
"it took about two and one-half years to reach the first release of ATS2 at "
"the beginning of September, 2013. As of now, the code base for the compiler "
"of ATS2 consists of 150,000+ lines of code (LOC), which are nearly all "
"written in ATS1."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:10
msgid ""
"When compared to ATS1, the single most important new feature is the template "
"system of ATS2. This is a feature that could potentially change the way a "
"programmer writes his or her code. One can certainly feel that this is a "
"very powerful feature (a bit like feeling that OOP is a very powerful "
"feature). However, how this feature should be properly and effectively used "
"in practice needs a lot more investigation."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:12
msgid ""
"Another thing about ATS2 is that it is a lot leaner than ATS. One can make "
"good use of ATS2 without any need for compiled library (libatslib.a). Also, "
"GC support in ATS1 is now removed; if needed, third-party GC (e.g., Bohem-"
"GC) can be readily employed."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:14
msgid "## ATS1"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:16
msgid "### ATS/Anairiats"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:18
msgid ""
"The first implementation written in ATS itself, consisting of nearly 100,000 "
"lines of source code. When compared to ATS/Geizella, a previous "
"implementation of ATS, ATS/Anairiats is significantly more efficient, and in "
"general it issues more informative messages for identifying program errors."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:20
msgid ""
"Bootstrapping via gcc In order to bootstrap ATS/Anairiats, one needs to "
"first check out the following svn directory and name it as some local "
"directory, say, \"FOO\":"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:24
msgid ""
"`svn co https://ats-lang.svn.sourceforge.net/svnroot/ats-lang/trunk FOO` "
"Note that this checkout puts the C code needed for bootstrapping in a "
"directory of the name `FOO/bootstrap0`.  Please go into the directory \"FOO"
"\" and then execute 'make all'."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:26
msgid ""
"Bootstrapping via ocaml It is also possible to use the ATS/Geizella compiler "
"(written in OCaml) for bootstrapping ATS/Anairiats. This can be done by "
"checking out the following svn directory and name it as the local directory "
"`FOO/bootstrap0`:"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:31
#, no-wrap
msgid ""
"```\n"
"svn co https://ats-lang.svn.sourceforge.net/svnroot/ats-lang/bootstrap/geizella \\\n"
"  FOO/bootstrap0\n"
"```\n"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:33
msgid ""
"After this is done, please go into the directory `FOO` and then execute "
"`make all-geizella`."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:35
msgid "### ATS/Geizella"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:37
msgid ""
"A previously released implementation of ATS (written in OCaml and C). In "
"this implementation, the native unboxed data representation (as is in C) is "
"adopted, and this makes ATS/Geizella particularly well suited for direct "
"interaction with C. As for parametric polymorphism, it is supported in ATS/"
"Geizella through the use of templates. ATS/Geizella is now largely out of "
"active use as ATS/Anairiats, a compiler for ATS that is almost entirely "
"written in ATS, has been bootstrapped successfully (with the help of ATS/"
"Geizella)."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:39
msgid "### ATS/Proto"
msgstr ""

#. type: Plain text
#: ATS-implementations.md:41
msgid ""
"The first implementation of ATS. In this implementation, the standard boxed "
"data representation is used to support parametric polymorphism. As of now, "
"ATS/Proto is no longer actively maintained and its main purpose is to serve "
"as an example for future reference."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:43
msgid "## Predecessors"
msgstr ""

#. type: Bullet: '* '
#: ATS-implementations.md:46
msgid ""
"[Xanadu](http://www.cs.bu.edu/~hwxi/Xanadu/Xanadu.html); mainly for "
"dependent types with imperative style."
msgstr ""

#. type: Bullet: '* '
#: ATS-implementations.md:46
msgid ""
"[Dependent ML](http://www.cs.bu.edu/~hwxi/DML/DML.html); mainly for "
"dependent types with functional style."
msgstr ""

#. type: Plain text
#: ATS-implementations.md:49
msgid ""
"## Influential languages * [Standard ML](https://en.wikipedia.org/wiki/"
"Standard_ML); mainly the syntax.  * [C](https://en.wikipedia.org/wiki/"
"C_(programming_language)); mainly the semantics."
msgstr ""

#. type: Plain text
#: Built-in-constraint-solving.md:2
msgid ""
"ATS can solve linear inequality constraints with [Fourier-Motzkin "
"elimination][1]."
msgstr ""

#. type: Plain text
#: Built-in-constraint-solving.md:4
msgid ""
"According to [this mailing list post][2], ATS2 will support some additional "
"(semi-)automated constraint solving."
msgstr ""

#. type: Plain text
#: Built-in-constraint-solving.md:6
msgid ""
"[1]: http://en.wikipedia.org/wiki/Fourier%E2%80%93Motzkin_elimination [2]: "
"https://sourceforge.net/mailarchive/forum.php?thread_name=Pine."
"LNX.4.64.1203041139230.8530%40csa2.bu.edu&forum_name=ats-lang-users"
msgstr ""

#. type: Plain text
#: overload.md:2
msgid "## Overloading basics"
msgstr ""

#. type: Plain text
#: overload.md:8
msgid ""
"Only functions can be overloaded; this includes both polymorphic and "
"template functions.  Overloading of functions is accomplished with the "
"`overload` and `with` keywords. We choose a string to become a symbol using "
"`symintr`, then overload a function with this symbol. For instance, a "
"standard way of doing this is as follows:"
msgstr ""

#. type: Plain text
#: overload.md:11 overload.md:27
msgid "```ocaml symintr foo"
msgstr ""

#. type: Plain text
#: overload.md:15
msgid "fun foo1(x: atype): btype overload foo with foo1 ```"
msgstr ""

#. type: Plain text
#: overload.md:24
msgid ""
"### Overloading precedence If the appropriate function cannot be resolved "
"based on type, a precedence mechanism can be specified by using the `of` "
"keyword followed by an (non-negative? positive?) integer.  Of course, one "
"may want to think carefully about using overloading in this way, since it "
"could be easy to forget exactly which function is being used in practice; "
"when in doubt, use the actual function name when calling the function. "
"Building on the previous example:"
msgstr ""

#. type: Plain text
#: overload.md:30
msgid "fun foo1(x: atype): btype overload foo with foo1 of 10"
msgstr ""

#. type: Plain text
#: overload.md:34
msgid "fun foo2(x: atype): btype overload foo with foo2 of 20 ```"
msgstr ""

#. type: Plain text
#: overload.md:37
msgid ""
"A higher number after `of` signifies a higher priority, so all else being "
"equal, foo2 will be used if we have a call like foo(atype)."
msgstr ""

#. type: Plain text
#: overload.md:39
msgid "### Operator fixity"
msgstr ""

#. type: Plain text
#: overload.md:42
msgid ""
"Whether an operator is infix or postfix can be declared using the `infix`, "
"`infixl`, `infixr`, `prefix`, and `postfix` keywords. For instance, the "
"following changes `+` to be a postfix operator, and we can overload it with "
"some function of our choice, say myfun(atype)."
msgstr ""

#. type: Plain text
#: overload.md:52
msgid ""
"```ocaml postfix + overload + with myfun (* Now instead of doing "
"myfun(atype) we can do: *)  val x: atype = some_val x+ (* But we can no "
"longer do this in the same scope: *)  val m = 3 + 5 ```"
msgstr ""

#. type: Plain text
#: overload.md:57
msgid ""
"### Renewing a string to be a symbol Some strings are reserved for other "
"purposes by default in ATS. For instance, `&&` is a macro.  However, if we do"
msgstr ""

#. type: Plain text
#: overload.md:61
msgid "```ocaml symintr && ```"
msgstr ""

#. type: Plain text
#: overload.md:64
msgid ""
"We can now overload `&&` with a function of our choice. Of course, the "
"original functionality of `&&` will no longer work in the same scope."
msgstr ""

#. type: Plain text
#: overload.md:67
msgid "### Creating new symbols with macros"
msgstr ""

#. type: Plain text
#: overload.md:72
msgid ""
"A combination of macros (macdefs) and fixity assignments can be used to "
"introduce syntactic sugar for specialized symbols. For instance, the example "
"below allows `^t` to be used as a postfix operator used to take the "
"transpose (function transp_LAgmat) of a matrix:"
msgstr ""

#. type: Plain text
#: overload.md:84
#, no-wrap
msgid ""
"```ocaml\n"
"(* ****** ****** *)\n"
"(*\n"
"   HX: a hackery of a little fun\n"
"*)\n"
"#define t 't'\n"
"infixr ^\n"
"macdef ^ (M, t) = transp_LAgmat (,(M))\n"
"//\n"
"(* ****** ****** *)\n"
"```\n"
msgstr ""

#. type: Plain text
#: overload.md:86
msgid "## Caveats"
msgstr ""

#. type: Plain text
#: overload.md:88
msgid "### Overloading doesn't work with indexed types"
msgstr ""

#. type: Plain text
#: overload.md:90
msgid ""
"Insert simplified version of failed example: https://groups.google.com/"
"forum/?utm_medium=email&utm_source=footer#!msg/ats-lang-users/Y1PxLL-9jfU/"
"kyjkxB0wwPkJ"
msgstr ""

#. type: Plain text
#: vim.md:1
msgid ""
"See [[editors|https://github.com/githwxi/ATS-Postiats/wiki/editors#vim]]."
msgstr ""

#. type: Plain text
#: char.md:2
msgid ""
"Characters are demarcated with single quotes, i.e. the character c is "
"written 'c'. Some characters may need an escape character (the back-slash) "
"because the sequence *'char* for the char being discussed has a special "
"meaning in ATS. One such example is '(, so we actually write '\\\\(' to "
"denote the left parentheses. We note here that strings, in contrast, are "
"demarcated with double quotes."
msgstr ""

#. type: Plain text
#: char.md:4
#, no-wrap
msgid ""
"Escape sequences for characters\n"
"-------------------------------\n"
msgstr ""

#. type: Plain text
#: char.md:6
msgid "The following list is believed to be exhaustive:"
msgstr ""

#. type: Plain text
#: char.md:17
#, no-wrap
msgid ""
"* C conventions are used for some characters, e.g.:\n"
"    * newline is written as '\\\\n'\n"
"    * carriage return is written as '\\\\r'\n"
"    * to input a single backlash, use two backslashes, '\\\\\\\\'\n"
"    * to input a single colon, use '\\\\''\n"
"* additionally, some characters may \"clash\" with ATS conventions, so they are escaped too:\n"
"    * '\\\\(' for left parenthesis (clashes with boxed tuple type)\n"
"    * '\\\\{' for left brace (clashes with boxed record type)\n"
"    * '\\\\[' for left bracket (clashes with singly-linked list literal)\n"
"* also, it is possible to specify a character in octal notation: '\\\\000' (backlash, then one to three octal digits 0-7), or in hexadecimal notation, with '\\\\0x00' (backlash, then leading zero, then 'x' or 'X', then one or more hexadecimal digit, which is either 0-9 or a-z or A-Z)\n"
msgstr ""

#. type: Plain text
#: char.md:19
msgid "(How do we specify ASCII codes in Hex, Bin, Dec, Oct, etc?)"
msgstr ""

#. type: Plain text
#: char.md:21
#, no-wrap
msgid ""
"*char* and Unicode\n"
"------------------\n"
msgstr ""

#. type: Plain text
#: char.md:23
msgid ""
"Please note that 'char' maps directly to C type 'char', therefore it is the "
"size of 1 byte, and cannot be used to represent any multi-byte encoding, "
"such as UTF-16 or UTF-32."
msgstr ""

#. type: Plain text
#: char.md:25
#, no-wrap
msgid ""
"Conversion functions for *char*\n"
"-----------------------------\n"
msgstr ""

#. type: Plain text
#: char.md:27
msgid ""
"(Also see our [[Rosetta Stone|Rosetta Stone]] (This section, and the Rosetta "
"Stone, need ATS2 versions))"
msgstr ""

#. type: Plain text
#: char.md:29
#, no-wrap
msgid "**char to string**\n"
msgstr ""

#. type: Plain text
#: char.md:37
#, no-wrap
msgid ""
"```ocaml\n"
"(*\n"
"   HX: the return is dynamically allocated\n"
"*)\n"
"fun tostring_char\n"
"  (c: char):<> strnptr(1) = \"mac#%\"\n"
"overload tostring with tostring_char\n"
"```\n"
msgstr ""

#. type: Plain text
#: editors.md:2
msgid "Several editors support ATS(2)."
msgstr ""

#. type: Plain text
#: editors.md:7
msgid ""
"## Emacs * ATS2-mode supports syntax highlighting of ATS and embedded C "
"code. For download, see the [official repository](https://github.com/mrd/"
"ats2-mode) or possible forks ([1](https://github.com/githwxi/ATS-Postiats-"
"contrib/blob/master/contrib/libats-/bbarker/emacs/ats2-mode.el), [2](../tree/"
"master/utils/emacs/ats2-mode.el)).  * ATS2-flymake depends on ATS2-mode. It "
"is available [with ATS2/Postiats](../tree/master/utils/emacs/ats2-flymake."
"el). It can highlight the location of the source of a type-error pretty well "
"but it may have some room for improvement. Currently, one can use ` C-x `` "
"(that is backquote) to locate the source of a type-error. Basically, you can "
"do the following (with ats2-mode for emacs being turned on):"
msgstr ""

#. type: Plain text
#: editors.md:13
#, no-wrap
msgid ""
"```\n"
"C-c C-c // for compilation\n"
"C-x `     // for locating the source of the first error\n"
"C-x `     // for locating the source of the next error\n"
"```\n"
msgstr ""

#. type: Plain text
#: editors.md:16
msgid ""
"## Vim There is existing code for a vim mode, but most of the ATS users seem "
"to use emacs. See [this issue](https://github.com/githwxi/ATS-Postiats/"
"issues/30) for a full discussion and code links."
msgstr ""

#. type: Plain text
#: editors.md:18
msgid ""
"## SublimeText This is just a syntax highlight file, not a full mode. You "
"can install it at the [Package Control](https://sublime.wbond.net/packages/"
"ATS%20Syntax%20Highlight)."
msgstr ""

#. type: Bullet: '* '
#: Typechecking-directives.md:3
msgid ""
"`$effmask_all` - tells the typechecker to ignore the tracking of function "
"[[effects|effects]], which is not really helpful for most types of "
"programming. It is used by writing `$effmask_all(...)` where the `...` is a "
"function call [\\[1\\]][1]."
msgstr ""

#. type: Bullet: '* '
#: Typechecking-directives.md:3
msgid ""
"`$showtype` - prints out the type of a value or variable in ATS's internal "
"type representation. Very helpful for understanding type errors, but the "
"exact meaning of the output can still be cryptic for more complicated cases. "
"See [[internal types|Internal types]] for more information and [[error "
"messages|Error messages]] for an example."
msgstr ""

#. type: Plain text
#: Typechecking-directives.md:4
msgid ""
"[1]: https://groups.google.com/forum/#!searchin/ats-lang-users/mask$20effect/"
"ats-lang-users/yqldklykEuM/021vPg65v9gJ"
msgstr ""

#. type: Plain text
#: emacs.md:1
msgid ""
"See [[editors|https://github.com/githwxi/ATS-Postiats/wiki/editors#emacs]]."
msgstr ""

#. type: Plain text
#: type.md:2
msgid ""
"ATS is perhaps more advanced than any other languages when it comes to "
"applying type theory an actual language, though this is not its only merit."
msgstr ""

#. type: Plain text
#: type.md:4
msgid ""
"For [[dependent types|dependent type]] and [[linear types|linear type]], "
"also see the [[FAQ|Frequently asked questions]]."
msgstr ""

#. type: Plain text
#: type.md:6
msgid ""
"A type is one of the many [sorts](sort) that a static expression or static "
"identifier can be. Other sorts are:"
msgstr ""

#. type: Plain text
#: type.md:10
msgid ""
"Ground sorts: int, bool, char, addr. They form the basis of dependent type "
"indices.  View, which are linear (in the sense of linear logic) "
"propositions.  Prop, which are classical propositions."
msgstr ""

#. type: Plain text
#: type.md:12
msgid ""
"A t@ype or (any)t@ype may be any size, whereas a type must be the size of a "
"pointer; a polymorphic or template function taking some t@ype as an argument "
"should also take a type. Please not that, in some places, a '0' may replace "
"the '@' in some type-related keywords. For instance, t0ype is introduced as "
"an alpha-numeric alternative to t@ype . However, @[...] can *not* be changed "
"into 0[...]."
msgstr ""

#. type: Plain text
#: type.md:15
msgid ""
"Viewtype, which are linear types. It can be seen as a type combined with a "
"view.  You can define a new sort using datasort. The first few lines of "
"sllist.dats demonstrate how to define a sort that resembles a list. You can "
"also alias sorts using sortdef, which also lets you piggy-back constraints "
"to a sort called subset sort. See prelude/sortdef.sats for examples. A "
"constraint is simply a static expression of a boolean sort."
msgstr ""

#. type: Plain text
#: type.md:17
msgid ""
"For each of the type, view, prop, it is possible to alias, declare abstract "
"quantities, and form algebraic constructors."
msgstr ""

#. type: Plain text
#: type.md:54
msgid ""
"<table border=\"1\" bordercolor=\"#888888\" cellspacing=\"0\" style=\"border-"
"color:rgb(136,136,136);border-width:1px;border-collapse:collapse\"> <tbody> "
"<tr> <td style=\"width:60px\"> </td> <td style=\"width:60px\">Static</td> "
"<td style=\"width:60px\">Type</td> <td style=\"width:60px\">View</td> <td "
"style=\"width:60px\">Prop</td> <td style=\"width:60px\">Viewtype</td> </tr> "
"<tr> <td>Aliasing</td> <td>stadef</td> <td style=\"width:60px\">typedef</td> "
"<td>viewdef</td> <td>propdef</td> <td>viewtypedef</td> </tr> <tr> "
"<td>Abstract</td> <td>sta</td> <td>abstype</td> <td>absview</td> "
"<td>absprop</td> <td>absviewtype</td> </tr> <tr> <td style=\"width:60px"
"\">Algebraic</td> <td style=\"width:60px\">(N/A)</td> <td style=\"width:60px"
"\">datatype</td> <td style=\"width:60px\">dataview</td> <td style="
"\"width:60px\">dataprop</td> <td style=\"width:60px\"><a href=\"https://"
"github.com/githwxi/ATS-Postiats/wiki/dataviewtype\">dataviewtype</a></td> </"
"tr> </tbody> </table>"
msgstr ""

#. type: Plain text
#: type.md:56
msgid ""
"Type, view, prop, and viewtype are special cases of statics, so whenever you "
"see typedef, viewdef, propdef and viewtypedef, you can just use stadef. "
"Similarly, for abstract declarations, you can use sta for abstype, absview, "
"absprop, and absviewtype. However, datasort, datatype, dataview, dataprop "
"and dataviewtype are not interchangeable. They define algebraic constructors "
"for a new \"thing\" (e.g. datatype gives you constructors for a new type, "
"dataview gives you constructors for a new view, and so on). [Reference and "
"further discussion](http://cs.likai.org/ats/ml-programmers-guide-to-ats)."
msgstr ""

#. type: Plain text
#: type.md:57
#, no-wrap
msgid "-----------------------\n"
msgstr ""

#. type: Plain text
#: type.md:59
#, no-wrap
msgid ""
"Type Annotation\n"
"-----------------------\n"
msgstr ""

#. type: Plain text
#: type.md:62
msgid ""
"For type annotation during value binding, it is important to remember the "
"following:"
msgstr ""

#. type: Plain text
#: type.md:64
msgid "There is a subtle difference between"
msgstr ""

#. type: Plain text
#: type.md:68
msgid "```ocaml val x = e: T ```"
msgstr ""

#. type: Plain text
#: type.md:70
msgid "and"
msgstr ""

#. type: Plain text
#: type.md:74
msgid "```ocaml val x: T = e ```"
msgstr ""

#. type: Plain text
#: type.md:77
msgid ""
"It is almost always the case that one requires the former style of "
"annotation in ATS."
msgstr ""

#. type: Plain text
#: type.md:79
msgid "The latter only checks that the type of e is a subtype of T."
msgstr ""

#. type: Plain text
#: type.md:80
msgid ""
"This is most commonly addressed when dealing with case or if-then-else "
"expressions."
msgstr ""

#. type: Plain text
#: license.md:2
msgid ""
"ATS/Postiats is covered under the GPLv3; see the [COPYING](../tree/master/"
"COPYING) file for more information and verification of the latest license."
msgstr ""

#. type: Plain text
#: license.md:3
msgid ""
"There is a [related question about implications for licensing your projects "
"when using ATS](https://github.com/githwxi/ATS-Postiats/wiki/Frequently-"
"asked-questions#ats-library-code-is-gplv3-so-does-this-mean-my-compiled-code-"
"also-must-be-gplv3)."
msgstr ""

#. type: Plain text
#: atspkgreloc.md:2
msgid ""
"Atspkgreloc is meant to be a convenient tool for people to share ATS code "
"[\\[1\\]][1]."
msgstr ""

#. type: Plain text
#: atspkgreloc.md:4
msgid "The command plus some examples can be found at:"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:6
msgid "https://github.com/githwxi/ATS-Postiats/tree/master/utils/atspkgreloc/"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:8
msgid "Say we have the following line in some code;"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:12
msgid ""
"```ocaml staload T = \"{http://www.ats-lang.org/LIBRARY}/contrib/libats-hwxi/"
"intinf/SATS/intinf_t.sats\" ```"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:15
msgid ""
"What is inside {...} is to be replaced with the value of `ATSPKGRELOCROOT` "
"after pre-processing.  Following is a complete example. Say the example is "
"stored in a file named test02.dats. If you do"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:19
msgid "``` patsopt --pkgreloc -d test02.dats ```"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:21
msgid ""
"you will see some text in JSON format printed out. For instance, one entry "
"looks like this:"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:31
msgid ""
"```json { \"pkgreloc_kind\": \"staload\" , \"pkgreloc_target\": \"/tmp/."
"ATSPKGRELOCROOT-hwxi/contrib/libats-hwxi/intinf/DATS/intinf_t.dats\" , "
"\"pkgreloc_source\": \"http://www.ats-lang.org/LIBRARY/contrib/libats-hwxi/"
"intinf/DATS/intinf_t.dats\" } ```"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:33
msgid ""
"You can use the command atspkgreloc to relocate the source to the target:"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:37
msgid "``` patsopt --pkgreloc -d test02.dats | atspkgreloc ```"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:39
msgid ""
"Then test02.dats can be compiled by using patscc. The following Makefile "
"contains all the details needed:"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:41
msgid ""
"https://github.com/githwxi/ATS-Postiats/blob/master/utils/atspkgreloc/TEST/"
"Makefile"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:52
msgid ""
"```ocaml (* ** A test for atspkgreloc *)  (* ****** ****** *)  // #include "
"\"share/atspre_staload.hats\" // (* ****** ****** *)"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:55
msgid "#define ATS_PACKNAME \"atspkgreloc_test02\""
msgstr ""

#. type: Plain text
#: atspkgreloc.md:65
msgid ""
"(* ****** ****** *)  // require \"{http://www.ats-lang.org/LIBRARY}/contrib/"
"libgmp/CATS/gmp.cats\" // require(*HX-2014-05-01: this one is required by "
"others*)  \"{http://www.ats-lang.org/LIBRARY}/contrib/libats-hwxi/intinf/"
"SATS/intinf_vt.sats\" // (* ****** ****** *)"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:70
msgid ""
"staload \"{http://www.ats-lang.org/LIBRARY}/contrib/libats-hwxi/intinf/SATS/"
"intinf.sats\" staload T = \"{http://www.ats-lang.org/LIBRARY}/contrib/libats-"
"hwxi/intinf/SATS/intinf_t.sats\" staload _ = \"{http://www.ats-lang.org/"
"LIBRARY}/contrib/libats-hwxi/intinf/DATS/intinf_t.dats\" staload _ = "
"\"{http://www.ats-lang.org/LIBRARY}/contrib/libats-hwxi/intinf/DATS/"
"intinf_vt.dats\""
msgstr ""

#. type: Plain text
#: atspkgreloc.md:72 atspkgreloc.md:92 atspkgreloc.md:96 atspkgreloc.md:107
msgid "(* ****** ****** *)"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:90
#, no-wrap
msgid ""
"fun\n"
"fact{i:nat}\n"
"(\n"
"  x: int (i)\n"
") : $T.Intinf = let\n"
"in\n"
"//\n"
"if x = 0\n"
"  then $T.int2intinf(1)\n"
"  else let\n"
"    val r1 = fact (x - 1)\n"
"  in\n"
"    $T.mul_int_intinf (x, r1)\n"
"  end // end of [else]\n"
"// end of [if]\n"
"//\n"
"end // end of [fact]\n"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:94
msgid "overload print with $T.print_intinf"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:105
msgid ""
"implement main0 () = () where { // val N = 100 val () = println! (\"fact(\", "
"N, \") = \", fact(N))  // } (* end of [main0] *)"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:110
msgid "(* end of [test02.dats] *)  ```"
msgstr ""

#. type: Plain text
#: atspkgreloc.md:112
msgid ""
"[1]: https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!"
"msg/ats-lang-users/yjYFjH5bskk/BJxhB67owGEJ"
msgstr ""

#. type: Plain text
#: Built-in-datatypes.md:2
msgid ""
"ATS has a number of data structures found in both functional and imperative "
"programming. We summarize them here."
msgstr ""

#. type: Bullet: '  - '
#: Built-in-datatypes.md:7
msgid ""
"**Maps (dictionaries).** Several implementations of maps are available, with "
"nearly identical interfaces in most cases. Look for linmap or funmap. These "
"are based on [AVL trees](http://en.wikipedia.org/wiki/AVL_tree) or [red-"
"black trees](http://en.wikipedia.org/wiki/Red%E2%80%93black_tree). Use "
"funmap variants unless you wish to employ linear types."
msgstr ""

#. type: Bullet: '  - '
#: Built-in-datatypes.md:7
msgid ""
"**Strings (C strings).** ATS provides a safe mechanism to use the infamous "
"but efficient C string."
msgstr ""

#. type: Bullet: '  - '
#: Built-in-datatypes.md:7
msgid "**Arrays.**"
msgstr ""

#. type: Bullet: '  - '
#: Built-in-datatypes.md:7
msgid ""
"**Sets.** ATS includes linear sets as `linset` and functional sets as "
"`funset`. These are based on [AVL trees][1], [red-black trees][2], or "
"ordered-lists."
msgstr ""

#. type: Plain text
#: Built-in-datatypes.md:9
#, no-wrap
msgid "    Integer multisets are also available. The book **Introduction to Programming in ATS** includes a [discussion and implementation of red-black trees][3] useful for sets.\n"
msgstr ""

#. type: Bullet: '  - '
#: Built-in-datatypes.md:11
msgid ""
"**Regular expressions.** ATS provides an interface to PCRE, a library for "
"Perl-style regular expressions."
msgstr ""

#. type: Plain text
#: Built-in-datatypes.md:14
msgid ""
"[1]: http://en.wikipedia.org/wiki/AVL_tree [2]: http://en.wikipedia.org/wiki/"
"Red%E2%80%93black_tree [3]: http://www.ats-lang.org/DOCUMENT/INTPROGINATS/"
"HTML/x2786.html"
msgstr ""

#. type: Plain text
#: TODO.md:4
msgid ""
"## Considerations for editing the wiki * Checking recent edits is a good way "
"to make sure the wiki remains as correct as possible, as well as a good way "
"to learn new things from other users. The wiki doesn't support diff view "
"currently, but a regularly updated repository with diff view is maintained "
"at https://github.com/bbarker/ATS-Postiats-wiki.  * If you change the name "
"of the page, either: **(1)** `git pull` the wiki and do a `grep` to see "
"which pages reference the page name you are changing, and then make the "
"appropriate changes; the wiki software currently will not automatically "
"update references. Alternatively **(2)**, create a link from the old page "
"name to the new page name. For instance, the old page might have only \"See "
"[new page name].\", where [new page name] is a link to the new page."
msgstr ""

#. type: Plain text
#: TODO.md:7
msgid ""
"## General TODO * Consider improving the [[wiki homepage|home]] to be more "
"beginner-friendly and easy on the eyes, e.g. https://wiki.python.org/moin/"
msgstr ""

#. type: Plain text
#: TODO.md:11
msgid "## Stubs (practically no content)  * [[Rosetta Stone|Rosetta Stone]]"
msgstr ""

#. type: Plain text
#: TODO.md:24
msgid ""
"## Incomplete (Of course, it is hard to say what is complete, but here we "
"mean listings that are highly incomplete or articles that only barely "
"scratch the surface.)  * [[char|char]] * [[code generation|code generation]] "
"* [[features|features]] * [[keywords|keywords]] * [[loops|loops]] * [[safety|"
"safety]] * [[Scientific Computing|Scientific Computing]] * [[sort|sort]] * "
"[[template|template]]"
msgstr ""

#. type: Plain text
#: TODO.md:33
msgid ""
"## Needs Expert Review (Authors are not confident in some important "
"statements being made.  Also note that you do not have to know everything "
"about a topic to possibly make improvements listed here.)  * [[char|char]] * "
"[[sort|sort]] * [[type|type]]"
msgstr ""

#. type: Plain text
#: TODO.md:38
msgid ""
"## Mostly ATS1 (Needs to be updated to ATS2)  * [[Contributed Libraries|"
"Contributed Libraries]] * [[loops|loops]]"
msgstr ""

#. type: Plain text
#: loops.md:2
msgid "## Loops as recursive functions"
msgstr ""

#. type: Plain text
#: loops.md:4
msgid "(need to reference termination metrics at some point here)"
msgstr ""

#. type: Plain text
#: loops.md:7
msgid ""
"## For and While loops In ATS2, it is usually encouraged to use recursive "
"functions instead of loops (as it is in most programming languages that "
"allow functional programming). However, there are cases where it may be "
"desirable to have `for` loops or `while` loops. For loops in particular are "
"useful for certain parallel programming environments, such as the [fork–join "
"model](http://en.wikipedia.org/wiki/Fork%E2%80%93join_model), which is "
"available in ATS2 through [OpenMP](https://github.com/githwxi/ATS-Postiats-"
"contrib/tree/master/contrib/OpenMP). However, note that currently OpenMP "
"`for` loops are only supported by using embedded or external C code due to "
"the difficulty in supporting `#pragma omp parallel for` in code generation "
"(see the `omp_for.dats` example)."
msgstr ""

#. type: Plain text
#: loops.md:9
msgid ""
"`while` loops naturally lend themselves towards waiting for some condition "
"to change, but unlike the use-case mentioned above using for loops, this "
"construct is typically easy to do with recursive functions, so while loops "
"are rarer in ATS2."
msgstr ""

#. type: Plain text
#: loops.md:12
#, no-wrap
msgid ""
"**Need to copy most info from here**\n"
"https://groups.google.com/forum/#!searchin/ats-lang-users/%22for$20loop%22/ats-lang-users/NfHeSJpaq78/zjys-ug5eMUJ\n"
msgstr ""

#. type: Plain text
#: loops.md:15
msgid "### A simple example"
msgstr ""

#. type: Plain text
#: loops.md:17
msgid "### An example using termination metrics"
msgstr ""

#. type: Plain text
#: loops.md:19
msgid ""
"### This page discusses briefly several mechanisms for using loops in ATS."
msgstr ""

#. type: Plain text
#: loops.md:22
#, no-wrap
msgid ""
"**Infinitely recursive functions may be a cause for a segfault.** \n"
"(But sometimes, one may want infinite recursion, as in a main loop; when is it not an issue?)  To avoid this possibility, one can take advantage of dependent types and termination metrics, as in [this example](http://www.ats-lang.org/DOCUMENT/INTPROGINATS/HTML/x2439.html).\n"
msgstr ""

#. type: Plain text
#: loops.md:26
#, no-wrap
msgid "**A main loop, useful for creating an application that will keep running until something causes it to return.** This can be implemented in several ways.\n"
msgstr ""

#. type: Plain text
#: loops.md:28
msgid "Firstly,"
msgstr ""

#. type: Plain text
#: loops.md:32
msgid "```ocaml implement main () = main() where { ... } ```"
msgstr ""

#. type: Plain text
#: dynload.md:2
msgid "The sole purpose of dynload is for doing initialization."
msgstr "dynload の唯一の目的は初期化を行なうことです。"

#. type: Plain text
#: dynload.md:4
msgid "Say in a file named 'foo.dats', we have the following line:"
msgstr "次の行を含むファイル 'foo.dats' があったとします:"

#. type: Plain text
#: dynload.md:8
msgid "```ocaml dynload \"bar.dats\" ```"
msgstr ""
"```ocaml\n"
"dynload \"bar.dats\"\n"
"```"

#. type: Plain text
#: dynload.md:12
msgid ""
"This line gets compiled to a call to the initialization function associated "
"with 'bar.dats'. Without this line, a link-time error message of the form "
"\"..._dynload_flag is undefined\" is to be reported."
msgstr ""
"この行は 'bar.dats' に関連する初期化関数の呼び出しにコンパイルされます。この"
"行がない場合には、リンク時のエラー \"..._dynload_flag is undefined\" が発生し"
"ます。"

#. type: Plain text
#: dynload.md:16
msgid ""
"If you don't want the initialization function (generated automatically by "
"the compiler for any .dats file) for 'bar.dats' to be called, then please "
"add the following line in 'bar.dats':"
msgstr ""
"もし 'bar.dats' の初期化関数 (この初期化関数は全ての .dats ファイルにコンパイ"
"ラが自動的に生成します) を呼び出したくない場合には、次の行を 'bar.dats' に追"
"加してください:"

#. type: Plain text
#: dynload.md:21
msgid "```ocaml #define ATS_DYNLOADFLAG 0 ``` Please do this with caution."
msgstr ""
"```ocaml\n"
"#define ATS_DYNLOADFLAG 0\n"
"```\n"
"\n"
"これには注意が必要です。"

#. type: Plain text
#: dynload.md:24
msgid ""
"Normally, 'dynload' lines should only occur in the file that contains the "
"implementation of the 'main' function [\\[1\\]][1]"
msgstr ""
"通常、'main' 関数の実装を含むファイルにおいてのみ 'dynload' 行を配置する必要"
"があります [\\[1\\]][1] 。"

#. type: Plain text
#: dynload.md:25
msgid ""
"[1]: https://groups.google.com/d/msg/ats-lang-users/jqFEAf1drXc/uv5x_rx3aMEJ"
msgstr ""
"[1]: https://groups.google.com/d/msg/ats-lang-users/jqFEAf1drXc/uv5x_rx3aMEJ"

#. type: Plain text
#: implementations.md:1
msgid "See [[ATS implementations|ATS implementations]]."
msgstr ""

#. type: Plain text
#: Error-messages.md:2
msgid ""
"Perhaps the most common error for most people new to ATS will be "
"[[typechecking errors|typechecking errors]]. For this reason, all new users "
"are encouraged to read some demonstrations and examples in the "
"[[typechecking errors|typechecking errors]] article."
msgstr ""

#. type: Plain text
#: Error-messages.md:4
msgid ""
"Error messages are evolving in ATS2. There are five primary classes of error "
"messages: [[parsing errors|parsing errors]], [[linker errors|linker "
"errors]], [[runtime errors|runtime errors]], [[compiler errors|compiler "
"errors]], and the most common -- [[typechecking errors|typechecking "
"errors]]. For error messages known to have been used in the past, especially "
"in ATS1, please see the [old wiki][1]."
msgstr ""

#. type: Plain text
#: Code-optimization.md:2
msgid "## When not to attempt clever code optimization ##"
msgstr "## 賢いコードの最適化を試みるべきでない場合 ##"

#. type: Plain text
#: Code-optimization.md:4
msgid ""
"- A `macdef` in ATS2 can involve type. Use macros only in cases where using "
"functions would be inconvenient. [Using macros probably does not make your "
"code run more quickly][1], since `gcc -O2` already inlines functions very "
"aggressively."
msgstr "- ATS2 における `macdef` は型を含むことができます。関数を使うのが不便な場合においてのみマクロを使ってください。[たいていマクロ使ってもあなたのコードが速くなることはありません][1]。`gcc -O2` が積極的に関数のインライン化を行なうためです。"

#. type: Plain text
#: Code-optimization.md:6
#, no-wrap
msgid "  [1]: https://groups.google.com/d/msg/ats-lang-users/Ql64LA9Wi88/fwrR7kJ3Ww0J\n"
msgstr "  [1]: https://groups.google.com/d/msg/ats-lang-users/Ql64LA9Wi88/fwrR7kJ3Ww0J\n"

#. type: Bullet: ' - '
#: Code-optimization.md:8
msgid ""
"Making use of the knowledge that separate val declarations within the same "
"scope technically denote different vals on the stack should not preclude one "
"from using a natural style. For instance:"
msgstr "同じスコープでスタックに異なる val を宣言を分けるという知識を利用することは、自然なコーディングスタイルです。例えば:"

#. type: Plain text
#: Code-optimization.md:13
#, no-wrap
msgid ""
"~~~~~~~~~~~~~~~\n"
"    val x = 5\n"
"    val x = 7\n"
"~~~~~~~~~~~~~~~\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:15
msgid ""
"here no extra space is allocated for the second 'x' due to constant "
"propagation. It is in generally unlikely that such a coding style would "
"incur any penalty."
msgstr "この場合、定数伝搬 (constant propagation) によって、二番目の 'x' のために追加のメモリ領域が確保されることはありません。このようなコーディングスタイルがなんらかのペナルティになることは一般にありえません。"

#. type: Plain text
#: Code-optimization.md:17
msgid "## Optimization tips ##"
msgstr ""

#. type: Plain text
#: Code-optimization.md:19
msgid ""
"- Instead of freeing an instance of a linear type and immediately creating "
"and returning a new one with the same value in a case expression, like this"
msgstr ""

#. type: Plain text
#: Code-optimization.md:22
#, no-wrap
msgid ""
"        case+ x of\n"
"        | ~GRgenes (genes) => GRgenes (genes)\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:24
#, no-wrap
msgid "    do this\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:27
#, no-wrap
msgid ""
"        case+ x of\n"
"        | GRgenes _ => (fold@ x; x)\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:29
#, no-wrap
msgid "    because `@fold` is compiled into a \"noop\".\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:33
msgid ""
"- Remove anonymous closure definitions from function calls when possible, to "
"avoid having them created each time the loop is called. For instance, a "
"simple string comparison function can be created like so:"
msgstr ""

#. type: Plain text
#: Code-optimization.md:35
#, no-wrap
msgid "        val cmp_str = lam(x:string,y:string):int =<cloref> compare (x, y)\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:38
msgid "## Making Lean Code ##"
msgstr ""

#. type: Plain text
#: Code-optimization.md:40
msgid ""
"When the size of your code matters, for instance, in embedded applications, "
"consider the following:"
msgstr ""

#. type: Plain text
#: Code-optimization.md:42
msgid "### Exception-free-code ###"
msgstr ""

#. type: Plain text
#: Code-optimization.md:44
msgid ""
"Note that using exceptions at all may cause memory leaks or require a GC, so "
"there is already some potential for overhead due to this. If your ATS code "
"does not make use of exceptions, then you can add the following flag when "
"compiling the code[\\[1\\]][1]:"
msgstr ""

#. type: Plain text
#: Code-optimization.md:46
msgid "\\-D_ATS_EXCEPTION_NONE"
msgstr ""

#. type: Plain text
#: Code-optimization.md:48
msgid "This will make the generated object code even more compact."
msgstr ""

#. type: Plain text
#: Code-optimization.md:50
msgid "Let hello.dats be a file containing the following line:"
msgstr ""

#. type: Plain text
#: Code-optimization.md:54
msgid "```ocaml implement main0 () = print \"Hello, world!\\n\" ```"
msgstr ""

#. type: Plain text
#: Code-optimization.md:60
#, no-wrap
msgid ""
"```\n"
"patscc -o hello1 hello.dats\n"
"size hello1\n"
"   text    data     bss     dec     hex filename\n"
"   3434     668      40    4142    102e hello1\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:66
#, no-wrap
msgid ""
"patscc -D_ATS_EXCEPTION_NONE -o hello2 hello.dats\n"
"size hello2\n"
"   text    data     bss     dec     hex filename\n"
"   1787     512      32    2331     91b hello2\n"
"```\n"
msgstr ""

#. type: Plain text
#: Code-optimization.md:67
msgid ""
"[1]: https://groups.google.com/d/msg/ats-lang-users/NEJDC7yY9cw/IWeK_0YRhksJ"
msgstr ""

#. type: Plain text
#: features.md:2
msgid ""
"This page lists features present in ATS, either in the current version, or "
"in a prior implementation. Additionally, possible features are listed "
"(please do not add possible future features without discussing the viability "
"with the ATS maintainer(s))."
msgstr ""

#. type: Plain text
#: features.md:5
msgid ""
"## Current features For now, there is no comprehensive list, but please "
"check [here](http://www.ats-lang.org/) for an overview."
msgstr ""

#. type: Plain text
#: features.md:10
msgid ""
"## Prior features The last know implementation for the feature is shown in "
"parentheses.  * Checking that `prfun` and `prfn` implementations exist (ATS/"
"Anairiats; see [[ATS/LF|ATSLF]]).  * Dependent types for floating point "
"values (ATS/Geizella or ATS/Proto?). Too complicated both internally (?) and "
"using in practice."
msgstr ""

#. type: Plain text
#: features.md:24
msgid ""
"## Possible features * Concurrent val statement evaluation, e.g., If I want "
"to indicate to the compiler that that `do_this` and `do_that` can be "
"evaluated in parallel, I use the following syntax: ```ocaml prval (pf1, pf2) "
"= ... // [pf1] and [pf2] are separated val ... = do_this (pf1 | ...) // "
"do_this is checked to be pure and ... = do_that (pf2 | ...) // do_that is "
"checked to be pure ``` Basically, the requirement is that (1) `do_this` and "
"`do_that` can only manipulate resources they own and (2) they do not share "
"any resources between them. See [here](https://github.com/githwxi/ATS-"
"Postiats/issues/79) for possible test code."
msgstr ""

#. type: Bullet: '* '
#: features.md:25
msgid ""
"Self-hosting compiler in ATS2 ([not anytime soon](https://groups.google.com/"
"d/msg/ats-lang-users/QIoMx1t6aLI/TAk7ugSsMB0J))."
msgstr ""

#. type: Plain text
#: sort.md:3
msgid ""
"This is a list of sorts (*i.e.* static types) that are the basis for the "
"static language of ATS; ATS is a layered system: sorts are used to classify "
"static terms, and static terms are used to classify dynamic terms."
msgstr ""

#. type: Plain text
#: sort.md:5
msgid "## Ground Sorts"
msgstr ""

#. type: Plain text
#: sort.md:8
msgid ""
"These are sorts that are present as types in C. (Is this true?) Combined "
"with other sorts and features of ATS, this allows us to prove at compile-"
"time propositions made involving C types (or more complex types involving "
"these ground sorts). This means also that every ground sort has an analogous "
"dynamic type of the sort t@ype: **int, bool char, addr**"
msgstr ""

#. type: Plain text
#: sort.md:10
msgid "## Other sorts"
msgstr ""

#. type: Plain text
#: sort.md:12
#, no-wrap
msgid "**cls, eff, prop, tkind** (alias tk), **t@ype, type, view, viewt@ype, viewtype**.\n"
msgstr ""

#. type: Plain text
#: sort.md:14
#, no-wrap
msgid "**eff 's** are function [[effects|effects]]. The [internal type](Internal types) is S2Eeff.  \n"
msgstr ""

#. type: Plain text
#: sort.md:16
#, no-wrap
msgid "**Views** are linear resources that signify a certain type is accessible from an associated variable. At-views, or @ views, are a special case of views which signify that a certain type is dereferencable at a specified memory location; they are used with pointers.\n"
msgstr ""

#. type: Plain text
#: sort.md:18
#, no-wrap
msgid "**tkind** is like 'type'; it is algebraic (that is, not involving quantifiers). The plan is to use tkind to support a more flexible/powerful way of [[template|templates]] instantiation.\n"
msgstr ""

#. type: Plain text
#: sort.md:20
msgid "## See also"
msgstr ""

#. type: Plain text
#: sort.md:21
msgid "[[Types|type]]"
msgstr ""

#. type: Plain text
#: atsdoc.md:2
msgid ""
"The command `atsdoc` is a utility (written in ATS1) that can be used on code "
"in ATS2 or ATS1. It has various purposes, ranging from [literate programming]"
"(https://en.wikipedia.org/wiki/Literate_programming) (the [ATS Book](http://"
"www.ats-lang.org/DOCUMENT/INT2PROGINATS/HTML/book1.html) is written using "
"it) to [metaprogramming](https://en.wikipedia.org/wiki/Metaprogramming). "
"More specifically, it is used for turning a text file (usually ending in ."
"atxt) laden with *texting function calls* into one in which these calls are "
"replaced with the strings represented by their return values. This utility "
"is designed for people who have some basic knowledge of programmming in ATS."
msgstr ""

#. type: Plain text
#: atsdoc.md:3
msgid ""
"For more detail, please see the [man page](http://www.ats-lang.org/htdocs-"
"old/DOCUMENT/atsdocman/atsdocman.html)."
msgstr ""

#. type: Plain text
#: ATS1.md:1
msgid ""
"See [ATS implementations](https://github.com/githwxi/ATS-Postiats/wiki/ATS-"
"implementations#ats1)."
msgstr ""

#. type: Plain text
#: template.md:2
#, no-wrap
msgid "**INV**\n"
msgstr ""

#. type: Plain text
#: template.md:5
msgid ""
"INV (for invariant) is essentially marker for typechecking [\\[1\\]][1]. For "
"instance, say you have a function foo declared as follows:"
msgstr ""

#. type: Plain text
#: template.md:9
msgid "```ocaml fun{a:t@ype} foo (xs: list0 (a)): void ```"
msgstr ""

#. type: Plain text
#: template.md:11
msgid ""
"Assume that `mylst` is of the type `list0 (T)` for some `T`. When "
"typechecking `foo(mylst)`, the typechecker will expand the expression as "
"follows by picking a placeholder `T1`:"
msgstr ""

#. type: Plain text
#: template.md:15
msgid "```ocaml foo<T1>(mylst)  ```"
msgstr ""

#. type: Plain text
#: template.md:17
msgid ""
"where `T <= T1` is assumed, so that mylst can contain any subtype--in the "
"[covariant](http://en.wikipedia.org/wiki/"
"Covariance_and_contravariance_(computer_science)#Formal_definition) sense--"
"of T1 [\\[2\\]][2]. Say that `foo2` is declared as follows:"
msgstr ""

#. type: Plain text
#: template.md:21
msgid "```ocaml fun{a:t@ype} foo2 (xs: list0 (INV(a))): void ```"
msgstr ""

#. type: Plain text
#: template.md:23
msgid ""
"When `foo2(mylst)` is typechecked, the typechecker simply expands the "
"expression to the following one:"
msgstr ""

#. type: Plain text
#: template.md:27
msgid "```ocaml foo2<T>(mylst)  ```"
msgstr ""

#. type: Plain text
#: template.md:29
msgid "preventing types other than precisely `T` to be a part of `mylst`."
msgstr ""

#. type: Plain text
#: template.md:31
msgid ""
"[1]: https://groups.google.com/forum/#!topic/ats-lang-users/ptwztS9IHWg [2]: "
"http://sourceforge.net/mailarchive/forum.php?thread_name=alpine."
"LRH.2.02.1302120729160.29395%40csa2.bu.edu&forum_name=ats-lang-users"
msgstr ""

#. type: Plain text
#: ATSLIB.md:2
msgid ""
"ATSLIB is a set of libraries included with ATS, which seems to include all "
"libraries except those included in [[contrib|contrib]] and a few others that "
"are primarily designed to be used by ATS itself, such as [libatslex](../../"
"tree/master/libatslex)."
msgstr ""

#. type: Plain text
#: ATSLIB.md:4
msgid ""
"ATSLIB currently includes [prelude](../../tree/master/prelude), [libc](../../"
"tree/master/libc), and [libats](../../tree/master/libats) (see [codegen/"
"Makefile_atslib](../../tree/master/codegen/Makefile_atslib) for how ATSLIB "
"is built)."
msgstr ""

#. type: Plain text
#: ATSLIB.md:5
msgid ""
"Examples using ATSLIB can be found in [doc/EXAMPLE/ATSLIB](../../tree/master/"
"doc/EXAMPLE/ATSLIB)."
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:2
msgid "## Sample code"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:4
msgid "### main.dats"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:8
msgid ""
"```ocaml #include \"share/atspre_define.hats\" #include \"share/"
"atspre_staload.hats\""
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:11
msgid ""
"extern fun c_func_kick (int): int = \"mac#\" extern fun ats_func_plus1: "
"(int) -> int = \"ext#\""
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:13
msgid "implement ats_func_plus1 (a) = a + 1"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:18
#, no-wrap
msgid ""
"implement main0 () = {\n"
"  val () = println! (c_func_kick 9)\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:20
msgid "### c_func.c"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:23
msgid "```c extern int ats_func_plus1(int);"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:28
#, no-wrap
msgid ""
"int c_func_kick(int a) {\n"
"    ats_func_plus1(a);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:30
msgid "## Build and run it"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:35
msgid "``` $ patscc main.dats c_func.c -o main $ ./main ```"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:37
msgid "## More detail"
msgstr ""

#. type: Plain text
#: Writing-interfaces-to-C-libraries.md:38
msgid ""
"See [\"Introduction to Programming in ATS: Interaction with C\"](http://www."
"ats-lang.org/DOCUMENT/INT2PROGINATS/HTML/c1995.html)."
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:3
msgid ""
"## ATS Compiler atscc, sometimes called patscc in ATS/Postiats, is a wrapper "
"utility to allow easier compilation of ATS source code than by using patsopt "
"directly."
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:5
msgid "Here is more information on 'patscc' and 'patsopt':"
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:7
msgid "http://www.ats-lang.org/RESOURCE/#ATS_utility"
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:10
msgid "In order to compile ATS2 programs, you can now do something like:"
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:14
msgid "``` patscc -o test test.dats test_header.sats test_helper.dats ```"
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:16
msgid ""
"For considerably large and complex projects (involving both ATS code and C "
"code), it may be beneficial to use 'patsopt' directly in a Makefile. In most "
"cases, 'patscc' is adequate for handling the compilation of ATS code."
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:19
msgid "## Using Makefiles"
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:22
msgid "## Using CMake"
msgstr ""

#. type: Plain text
#: Compiling-ATS-code.md:23
msgid "## Compiling Portable Code"
msgstr ""

#. type: Plain text
#: Style-guide.md:2
#, no-wrap
msgid ""
"Functional Programming (FP) style in ATS.\n"
"-----------------------------------------------------------\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:6
#, no-wrap
msgid "**General Advice**\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:8
#, no-wrap
msgid "**(Insert sagely advice in this paragraph)** As with many things, optimal learning can be achieved by different people in different ways. A suggestion for functional programming in general, to those who have experience in imperative programming, is to read examples, understand examples, and ***implement examples***. Much like math or writing literature, most people need practice and experience to really become effective. Abstraction is an important mechanism in making good style (and good code) possible. This [code example for a calculator](http://www.cs.bu.edu/~hwxi/academic/courses/CS320/Spring13/code/calculator/), while not exactly a tutorial, demonstrates these principles. [Discussion on the calculator example is located here](https://groups.google.com/forum/?fromgroups=#!topic/ats-lang-users/ad5S6SY0I0E).\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:11
msgid ""
"(Any good journals or sites accessible to a beginner that aren't ATS "
"specific but still applicable for an ATS beginner?)"
msgstr ""

#. type: Plain text
#: Style-guide.md:13
msgid ""
"There are many examples in the [ATS2 Book](http://www.ats-lang.org/DOCUMENT/"
"INT2PROGINATS/HTML/book1.html), and also [some examples listed separately]"
"(http://www.ats-lang.org/htdocs-old/EXAMPLE/example.html)."
msgstr ""

#. type: Plain text
#: Style-guide.md:16
#, no-wrap
msgid "**Some examples of poor versus good implementations in ATS:**\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:18
msgid ""
"[A simple tokenizer.](https://groups.google.com/forum/?fromgroups#!topic/ats-"
"lang-users/SeVHXg8jcxA)"
msgstr ""

#. type: Plain text
#: Style-guide.md:20
msgid ""
"[How **NOT** to use references.](http://www.ats-lang.org/DOCUMENT/"
"INTPROGINATS/HTML/x1357.html)"
msgstr ""

#. type: Plain text
#: Style-guide.md:23
#, no-wrap
msgid ""
"**Using case with conditionals.**\n"
"An alternative to using a string of if-then-else expressions is to use a case-when expression. This is more powerful and elegant than if-then-else because pattern matching can also be integrated, and the syntax is more compact. For a simple example emulating switch-case without pattern matching, see the following:\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:35
msgid ""
"```ocaml (* We are testing x for several possible values.  We use case+ of "
"0, but we could use \"of anything\" since the anything doesn't matter in "
"this case.  *)  case+ 0 of | _ when x = 1 || x = 3 => print(\"An odd int < "
"5\\n\")  | _ when x = 2 || x = 4 => print(\"An even int < 5\\n\")  | _ => "
"print(\"Not 1, 2, 3, or 4.\\n\")  ```"
msgstr ""

#. type: Plain text
#: Style-guide.md:38
#, no-wrap
msgid ""
"**val vs var**\n"
"Some very good material on how to deal with val and var bindings, which come from functional and imperative programming respectively, can be found on the [old ATS site](http://www.ats-lang.org/htdocs-old/TUTORIAL/contents/val-and-var.html).\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:40
msgid ""
"Additionally, some static assignment features supported by val [are "
"currently unsupported by var](https://groups.google.com/d/msg/ats-lang-users/"
"V7Mr-NZcB5E/mbaTioLJPv0J), but in principle could be added. As a work "
"around, intermediate vals can be used."
msgstr ""

#. type: Plain text
#: Style-guide.md:43
#, no-wrap
msgid "**Loops**\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:45
msgid ""
"Examples abound on using tail-recursive functions as loops in place of while "
"and for loops to achieve the same effect in a functional programming style. "
"Often, it is useful to declare a function as being &lt;cloref&gt; to allow "
"the function to use variables defined outside of its body or argument list; "
"&lt;cloref&gt; means \"the function is a peristent closure that requires the "
"garbage collector to be freed\". [Apparently](https://groups.google.com/d/"
"msg/ats-lang-users/2LtZdgNO9W8/H_PjUDG1uUUJ), this does not mean that a "
"closure is actually created each time a &lt;cloref&gt; function is called, "
"as it is heap allocated. See [this tutorial](http://bluishcoder.co."
"nz/2010/06/20/closures-in-ats.html) for further details."
msgstr ""

#. type: Plain text
#: Style-guide.md:48
#, no-wrap
msgid ""
"Style with dependent types.\n"
"---------------------------\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:50
msgid ""
"Dependent types are often difficult to use, and should be avoided when "
"possible on the first pass of writing an implementation. Their use can "
"overly complicate program implementation by a very large margin; so a non-"
"dependent \"program-first program verification\" approach, possibly with "
"linear types, is encouraged."
msgstr ""

#. type: Plain text
#: Style-guide.md:52
msgid ""
"An example of this is a [[sort|sort]] for doubles and floats, which no "
"longer exists in ATS due to its propensity for complicating code."
msgstr ""

#. type: Plain text
#: Style-guide.md:54
msgid ""
"The same caution and program-first program verification approach can likely "
"be applied to writing proof functions in ATS."
msgstr ""

#. type: Plain text
#: Style-guide.md:57
#, no-wrap
msgid ""
"Style with linear types.\n"
"---------------------------\n"
msgstr ""

#. type: Plain text
#: Style-guide.md:59
msgid ""
"Linear types are generally easy to use, with a few exceptions, such as "
"[[dataviewtype|dataviewtype]]s. No knowledge of linear logic formalisms is "
"necessary for using linear types in ATS. Perhaps the main issue for "
"beginners with linear types, or at least linear types in ATS, will be "
"getting used to a somewhat large body of syntactical features; many of these "
"share some overlap in their conceptual usage but operate on different "
"resources. This is somewhat in contrast to dependent types, where the syntax "
"is relatively easy, but keeping track of the logic in one's mind can become "
"quite a burden. This makes using dependent type all too easy to get one in "
"to trouble with the typechecker (see above)."
msgstr ""

#. type: Plain text
#: Style-guide.md:60
msgid ""
"An [example of using linear types with unlimited precision integers](https://"
"groups.google.com/forum/?fromgroups=#!topic/ats-lang-users/Cdk-_gbeVfE) "
"(using [GMP](http://gmplib.org/)) is available, which should be useful for "
"beginners to learn linear types."
msgstr ""
